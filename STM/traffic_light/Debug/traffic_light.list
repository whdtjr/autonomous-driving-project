
traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08005b64  08005b64  00006b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006014  08006014  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800601c  0800601c  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800601c  0800601c  0000701c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006020  08006020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006024  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae4  20000074  08006098  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  08006098  00008b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e369  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002247  00000000  00000000  0001640d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00018658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa2  00000000  00000000  000193f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017911  00000000  00000000  00019e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f49a  00000000  00000000  000317ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009061a  00000000  00000000  00040c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d125f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f4  00000000  00000000  000d12a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d5898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b4c 	.word	0x08005b4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005b4c 	.word	0x08005b4c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80005f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005f4:	2100      	movs	r1, #0
 80005f6:	68b8      	ldr	r0, [r7, #8]
 80005f8:	f004 fa1e 	bl	8004a38 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80005fc:	f240 4202 	movw	r2, #1026	@ 0x402
 8000600:	2100      	movs	r1, #0
 8000602:	4826      	ldr	r0, [pc, #152]	@ (800069c <esp_at_command+0xc0>)
 8000604:	f004 fa18 	bl	8004a38 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f7ff fdf3 	bl	80001f4 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	2364      	movs	r3, #100	@ 0x64
 8000614:	68f9      	ldr	r1, [r7, #12]
 8000616:	4822      	ldr	r0, [pc, #136]	@ (80006a0 <esp_at_command+0xc4>)
 8000618:	f002 ffbe 	bl	8003598 <HAL_UART_Transmit>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d032      	beq.n	8000688 <esp_at_command+0xac>
        return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e035      	b.n	8000694 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <esp_at_command+0xc0>)
 800062a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800062e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000632:	d302      	bcc.n	800063a <esp_at_command+0x5e>
            return -2;
 8000634:	f06f 0301 	mvn.w	r3, #1
 8000638:	e02c      	b.n	8000694 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 800063a:	491a      	ldr	r1, [pc, #104]	@ (80006a4 <esp_at_command+0xc8>)
 800063c:	4817      	ldr	r0, [pc, #92]	@ (800069c <esp_at_command+0xc0>)
 800063e:	f004 fa7f 	bl	8004b40 <strstr>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <esp_at_command+0x72>
            return -3;
 8000648:	f06f 0302 	mvn.w	r3, #2
 800064c:	e022      	b.n	8000694 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 800064e:	4916      	ldr	r1, [pc, #88]	@ (80006a8 <esp_at_command+0xcc>)
 8000650:	4812      	ldr	r0, [pc, #72]	@ (800069c <esp_at_command+0xc0>)
 8000652:	f004 fa75 	bl	8004b40 <strstr>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00e      	beq.n	800067a <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <esp_at_command+0xc0>)
 800065e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000662:	461a      	mov	r2, r3
 8000664:	490d      	ldr	r1, [pc, #52]	@ (800069c <esp_at_command+0xc0>)
 8000666:	68b8      	ldr	r0, [r7, #8]
 8000668:	f004 fafb 	bl	8004c62 <memcpy>
            *length = cb_data.length;
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <esp_at_command+0xc0>)
 800066e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	801a      	strh	r2, [r3, #0]
            return 0;
 8000676:	2300      	movs	r3, #0
 8000678:	e00c      	b.n	8000694 <esp_at_command+0xb8>
        }
        time_out -= 10;
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	3b0a      	subs	r3, #10
 800067e:	b29b      	uxth	r3, r3
 8000680:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f001 f8c4 	bl	8001810 <HAL_Delay>
    while(time_out > 0)
 8000688:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800068c:	2b00      	cmp	r3, #0
 800068e:	dccb      	bgt.n	8000628 <esp_at_command+0x4c>
    }
    return -4;
 8000690:	f06f 0303 	mvn.w	r3, #3
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200004d8 	.word	0x200004d8
 80006a0:	20000970 	.word	0x20000970
 80006a4:	08005b64 	.word	0x08005b64
 80006a8:	08005b6c 	.word	0x08005b6c

080006ac <esp_reset>:

static int esp_reset(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80006b6:	1dba      	adds	r2, r7, #6
 80006b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006bc:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <esp_reset+0x38>)
 80006be:	480a      	ldr	r0, [pc, #40]	@ (80006e8 <esp_reset+0x3c>)
 80006c0:	f7ff ff8c 	bl	80005dc <esp_at_command>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d002      	beq.n	80006d0 <esp_reset+0x24>
    {
    	return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	e004      	b.n	80006da <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80006d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d4:	f001 f89c 	bl	8001810 <HAL_Delay>
    return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000a0 	.word	0x200000a0
 80006e8:	08005b70 	.word	0x08005b70

080006ec <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80006fa:	f107 020a 	add.w	r2, r7, #10
 80006fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000702:	492d      	ldr	r1, [pc, #180]	@ (80007b8 <request_ip_addr+0xcc>)
 8000704:	482d      	ldr	r0, [pc, #180]	@ (80007bc <request_ip_addr+0xd0>)
 8000706:	f7ff ff69 	bl	80005dc <esp_at_command>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000710:	482b      	ldr	r0, [pc, #172]	@ (80007c0 <request_ip_addr+0xd4>)
 8000712:	f004 f88f 	bl	8004834 <puts>
 8000716:	e049      	b.n	80007ac <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000718:	492a      	ldr	r1, [pc, #168]	@ (80007c4 <request_ip_addr+0xd8>)
 800071a:	4827      	ldr	r0, [pc, #156]	@ (80007b8 <request_ip_addr+0xcc>)
 800071c:	f004 f9b4 	bl	8004a88 <strtok>
 8000720:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d03e      	beq.n	80007a6 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	e009      	b.n	8000742 <request_ip_addr+0x56>
                printf("%c", response[i]);
 800072e:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <request_ip_addr+0xcc>)
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f004 f81e 	bl	8004778 <putchar>
            for(int i = 0 ; i < length ; i++)
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	3301      	adds	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	897b      	ldrh	r3, [r7, #10]
 8000744:	461a      	mov	r2, r3
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	4293      	cmp	r3, r2
 800074a:	dbf0      	blt.n	800072e <request_ip_addr+0x42>
        }

        while(line != NULL)
 800074c:	e02b      	b.n	80007a6 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800074e:	491e      	ldr	r1, [pc, #120]	@ (80007c8 <request_ip_addr+0xdc>)
 8000750:	6978      	ldr	r0, [r7, #20]
 8000752:	f004 f9f5 	bl	8004b40 <strstr>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01f      	beq.n	800079c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800075c:	491b      	ldr	r1, [pc, #108]	@ (80007cc <request_ip_addr+0xe0>)
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f004 f992 	bl	8004a88 <strtok>
                ip = strtok(NULL, "\"");
 8000764:	4919      	ldr	r1, [pc, #100]	@ (80007cc <request_ip_addr+0xe0>)
 8000766:	2000      	movs	r0, #0
 8000768:	f004 f98e 	bl	8004a88 <strtok>
 800076c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800076e:	4918      	ldr	r1, [pc, #96]	@ (80007d0 <request_ip_addr+0xe4>)
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f7ff fd35 	bl	80001e0 <strcmp>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00f      	beq.n	800079c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800077c:	2210      	movs	r2, #16
 800077e:	2100      	movs	r1, #0
 8000780:	4814      	ldr	r0, [pc, #80]	@ (80007d4 <request_ip_addr+0xe8>)
 8000782:	f004 f959 	bl	8004a38 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f7ff fd34 	bl	80001f4 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	68f9      	ldr	r1, [r7, #12]
 8000792:	4810      	ldr	r0, [pc, #64]	@ (80007d4 <request_ip_addr+0xe8>)
 8000794:	f004 fa65 	bl	8004c62 <memcpy>
                    return 0;
 8000798:	2300      	movs	r3, #0
 800079a:	e009      	b.n	80007b0 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800079c:	4909      	ldr	r1, [pc, #36]	@ (80007c4 <request_ip_addr+0xd8>)
 800079e:	2000      	movs	r0, #0
 80007a0:	f004 f972 	bl	8004a88 <strtok>
 80007a4:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1d0      	bne.n	800074e <request_ip_addr+0x62>
        }
    }
    return -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000a0 	.word	0x200000a0
 80007bc:	08005bb8 	.word	0x08005bb8
 80007c0:	08005bc4 	.word	0x08005bc4
 80007c4:	08005bac 	.word	0x08005bac
 80007c8:	08005be4 	.word	0x08005be4
 80007cc:	08005bb4 	.word	0x08005bb4
 80007d0:	08005b7c 	.word	0x08005b7c
 80007d4:	20000090 	.word	0x20000090

080007d8 <esp_client_conn>:
int esp_client_conn()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b092      	sub	sp, #72	@ 0x48
 80007dc:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2240      	movs	r2, #64	@ 0x40
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 f926 	bl	8004a38 <memset>
  uint16_t length = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80007f0:	f107 0008 	add.w	r0, r7, #8
 80007f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007f8:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <esp_client_conn+0x48>)
 80007fa:	490a      	ldr	r1, [pc, #40]	@ (8000824 <esp_client_conn+0x4c>)
 80007fc:	f004 f822 	bl	8004844 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000800:	1dba      	adds	r2, r7, #6
 8000802:	f107 0008 	add.w	r0, r7, #8
 8000806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800080a:	4907      	ldr	r1, [pc, #28]	@ (8000828 <esp_client_conn+0x50>)
 800080c:	f7ff fee6 	bl	80005dc <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <esp_client_conn+0x54>)
 8000812:	f000 f909 	bl	8000a28 <esp_send_data>
	return 0;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3748      	adds	r7, #72	@ 0x48
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08005bf0 	.word	0x08005bf0
 8000824:	08005bfc 	.word	0x08005bfc
 8000828:	200000a0 	.word	0x200000a0
 800082c:	08005c18 	.word	0x08005c18

08000830 <esp_get_status>:
int esp_get_status()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 800083a:	1dba      	adds	r2, r7, #6
 800083c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000840:	4909      	ldr	r1, [pc, #36]	@ (8000868 <esp_get_status+0x38>)
 8000842:	480a      	ldr	r0, [pc, #40]	@ (800086c <esp_get_status+0x3c>)
 8000844:	f7ff feca 	bl	80005dc <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000848:	4909      	ldr	r1, [pc, #36]	@ (8000870 <esp_get_status+0x40>)
 800084a:	4807      	ldr	r0, [pc, #28]	@ (8000868 <esp_get_status+0x38>)
 800084c:	f004 f978 	bl	8004b40 <strstr>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <esp_get_status+0x2a>
    {
    	return 0;
 8000856:	2300      	movs	r3, #0
 8000858:	e001      	b.n	800085e <esp_get_status+0x2e>
    }
	return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000a0 	.word	0x200000a0
 800086c:	08005c2c 	.word	0x08005c2c
 8000870:	08005c3c 	.word	0x08005c3c

08000874 <drv_esp_init>:
int drv_esp_init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000878:	2210      	movs	r2, #16
 800087a:	2100      	movs	r1, #0
 800087c:	4806      	ldr	r0, [pc, #24]	@ (8000898 <drv_esp_init+0x24>)
 800087e:	f004 f8db 	bl	8004a38 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000882:	2201      	movs	r2, #1
 8000884:	4905      	ldr	r1, [pc, #20]	@ (800089c <drv_esp_init+0x28>)
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <drv_esp_init+0x2c>)
 8000888:	f002 ff11 	bl	80036ae <HAL_UART_Receive_IT>

    return esp_reset();
 800088c:	f7ff ff0e 	bl	80006ac <esp_reset>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000090 	.word	0x20000090
 800089c:	200004d7 	.word	0x200004d7
 80008a0:	20000970 	.word	0x20000970

080008a4 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2240      	movs	r2, #64	@ 0x40
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f004 f8bb 	bl	8004a38 <memset>
  if(ssid == NULL || passwd == NULL)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <ap_conn_func+0x2a>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80008ce:	4817      	ldr	r0, [pc, #92]	@ (800092c <ap_conn_func+0x88>)
 80008d0:	f003 ffb0 	bl	8004834 <puts>
 80008d4:	e026      	b.n	8000924 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 80008d6:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80008da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008de:	4914      	ldr	r1, [pc, #80]	@ (8000930 <ap_conn_func+0x8c>)
 80008e0:	4814      	ldr	r0, [pc, #80]	@ (8000934 <ap_conn_func+0x90>)
 80008e2:	f7ff fe7b 	bl	80005dc <esp_at_command>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <ap_conn_func+0x94>)
 80008ee:	f003 ffa1 	bl	8004834 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 80008f2:	f107 000c 	add.w	r0, r7, #12
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	4910      	ldr	r1, [pc, #64]	@ (800093c <ap_conn_func+0x98>)
 80008fc:	f003 ffa2 	bl	8004844 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000900:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000904:	f107 000c 	add.w	r0, r7, #12
 8000908:	f241 7370 	movw	r3, #6000	@ 0x1770
 800090c:	4908      	ldr	r1, [pc, #32]	@ (8000930 <ap_conn_func+0x8c>)
 800090e:	f7ff fe65 	bl	80005dc <esp_at_command>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	4808      	ldr	r0, [pc, #32]	@ (8000940 <ap_conn_func+0x9c>)
 8000920:	f003 ff18 	bl	8004754 <iprintf>
}
 8000924:	3750      	adds	r7, #80	@ 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08005ca0 	.word	0x08005ca0
 8000930:	200000a0 	.word	0x200000a0
 8000934:	08005ccc 	.word	0x08005ccc
 8000938:	08005cdc 	.word	0x08005cdc
 800093c:	08005cf0 	.word	0x08005cf0
 8000940:	08005d08 	.word	0x08005d08

08000944 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <HAL_UART_RxCpltCallback+0x9c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d117      	bne.n	8000986 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <HAL_UART_RxCpltCallback+0xa0>)
 8000958:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800095c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000960:	d20c      	bcs.n	800097c <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <HAL_UART_RxCpltCallback+0xa0>)
 8000964:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	b291      	uxth	r1, r2
 800096c:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <HAL_UART_RxCpltCallback+0xa0>)
 800096e:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000972:	461a      	mov	r2, r3
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_UART_RxCpltCallback+0xa4>)
 8000976:	7819      	ldrb	r1, [r3, #0]
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_UART_RxCpltCallback+0xa0>)
 800097a:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	491a      	ldr	r1, [pc, #104]	@ (80009e8 <HAL_UART_RxCpltCallback+0xa4>)
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f002 fe94 	bl	80036ae <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <HAL_UART_RxCpltCallback+0xa8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d122      	bne.n	80009d6 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_UART_RxCpltCallback+0xb0>)
 8000996:	7811      	ldrb	r1, [r2, #0]
 8000998:	4a17      	ldr	r2, [pc, #92]	@ (80009f8 <HAL_UART_RxCpltCallback+0xb4>)
 800099a:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a15      	ldr	r2, [pc, #84]	@ (80009f8 <HAL_UART_RxCpltCallback+0xb4>)
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b0d      	cmp	r3, #13
 80009a8:	d10b      	bne.n	80009c2 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <HAL_UART_RxCpltCallback+0xb4>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_UART_RxCpltCallback+0xb8>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	e004      	b.n	80009cc <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a09      	ldr	r2, [pc, #36]	@ (80009f0 <HAL_UART_RxCpltCallback+0xac>)
 80009ca:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	4909      	ldr	r1, [pc, #36]	@ (80009f4 <HAL_UART_RxCpltCallback+0xb0>)
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f002 fe6c 	bl	80036ae <HAL_UART_Receive_IT>
    }
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40011400 	.word	0x40011400
 80009e4:	200004d8 	.word	0x200004d8
 80009e8:	200004d7 	.word	0x200004d7
 80009ec:	40004400 	.word	0x40004400
 80009f0:	200008dc 	.word	0x200008dc
 80009f4:	200004d6 	.word	0x200004d6
 80009f8:	200004a4 	.word	0x200004a4
 80009fc:	200004a0 	.word	0x200004a0

08000a00 <AiotClient_Init>:


void AiotClient_Init()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000a04:	4906      	ldr	r1, [pc, #24]	@ (8000a20 <AiotClient_Init+0x20>)
 8000a06:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <AiotClient_Init+0x24>)
 8000a08:	f7ff ff4c 	bl	80008a4 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fe6d 	bl	80006ec <request_ip_addr>
	esp_client_conn();
 8000a12:	f7ff fee1 	bl	80007d8 <esp_client_conn>
	esp_get_status();
 8000a16:	f7ff ff0b 	bl	8000830 <esp_get_status>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08005d68 	.word	0x08005d68
 8000a24:	08005d74 	.word	0x08005d74

08000a28 <esp_send_data>:

void esp_send_data(char *data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	@ 0x50
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	2240      	movs	r2, #64	@ 0x40
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 fffd 	bl	8004a38 <memset>
	uint16_t length = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fbd6 	bl	80001f4 <strlen>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	490e      	ldr	r1, [pc, #56]	@ (8000a88 <esp_send_data+0x60>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fef7 	bl	8004844 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000a56:	f107 020e 	add.w	r2, r7, #14
 8000a5a:	f107 0010 	add.w	r0, r7, #16
 8000a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a62:	490a      	ldr	r1, [pc, #40]	@ (8000a8c <esp_send_data+0x64>)
 8000a64:	f7ff fdba 	bl	80005dc <esp_at_command>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d107      	bne.n	8000a7e <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000a6e:	f107 020e 	add.w	r2, r7, #14
 8000a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a76:	4905      	ldr	r1, [pc, #20]	@ (8000a8c <esp_send_data+0x64>)
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fdaf 	bl	80005dc <esp_at_command>
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	@ 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	08005d7c 	.word	0x08005d7c
 8000a8c:	200000a0 	.word	0x200000a0

08000a90 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	4903      	ldr	r1, [pc, #12]	@ (8000aa4 <drv_uart_init+0x14>)
 8000a98:	4803      	ldr	r0, [pc, #12]	@ (8000aa8 <drv_uart_init+0x18>)
 8000a9a:	f002 fe08 	bl	80036ae <HAL_UART_Receive_IT>
    return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200004d6 	.word	0x200004d6
 8000aa8:	20000928 	.word	0x20000928

08000aac <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000ab4:	1d39      	adds	r1, r7, #4
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <__io_putchar+0x2c>)
 8000abc:	f002 fd6c 	bl	8003598 <HAL_UART_Transmit>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <__io_putchar+0x1e>
        return ch;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	e001      	b.n	8000ace <__io_putchar+0x22>
    return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000928 	.word	0x20000928

08000adc <set_led>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_led(uint8_t state_led)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // RED OFF
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2110      	movs	r1, #16
 8000aea:	481b      	ldr	r0, [pc, #108]	@ (8000b58 <set_led+0x7c>)
 8000aec:	f001 f9dc 	bl	8001ea8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // YELLOW OFF
 8000af0:	2200      	movs	r2, #0
 8000af2:	2120      	movs	r1, #32
 8000af4:	4818      	ldr	r0, [pc, #96]	@ (8000b58 <set_led+0x7c>)
 8000af6:	f001 f9d7 	bl	8001ea8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // GREEN OFF
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	@ 0x40
 8000afe:	4816      	ldr	r0, [pc, #88]	@ (8000b58 <set_led+0x7c>)
 8000b00:	f001 f9d2 	bl	8001ea8 <HAL_GPIO_WritePin>

    switch(state_led)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d018      	beq.n	8000b3c <set_led+0x60>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	dc1f      	bgt.n	8000b4e <set_led+0x72>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <set_led+0x3c>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d009      	beq.n	8000b2a <set_led+0x4e>
        case 2: // RED
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
            time_led = RED_TIME;
            break;
    }
}
 8000b16:	e01a      	b.n	8000b4e <set_led+0x72>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2140      	movs	r1, #64	@ 0x40
 8000b1c:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <set_led+0x7c>)
 8000b1e:	f001 f9c3 	bl	8001ea8 <HAL_GPIO_WritePin>
            time_led = GREEN_TIME;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <set_led+0x80>)
 8000b24:	2206      	movs	r2, #6
 8000b26:	701a      	strb	r2, [r3, #0]
            break;
 8000b28:	e011      	b.n	8000b4e <set_led+0x72>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <set_led+0x7c>)
 8000b30:	f001 f9ba 	bl	8001ea8 <HAL_GPIO_WritePin>
            time_led = YELLOW_TIME;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <set_led+0x80>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	701a      	strb	r2, [r3, #0]
            break;
 8000b3a:	e008      	b.n	8000b4e <set_led+0x72>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <set_led+0x7c>)
 8000b42:	f001 f9b1 	bl	8001ea8 <HAL_GPIO_WritePin>
            time_led = RED_TIME;
 8000b46:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <set_led+0x80>)
 8000b48:	2206      	movs	r2, #6
 8000b4a:	701a      	strb	r2, [r3, #0]
            break;
 8000b4c:	bf00      	nop
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	200009c1 	.word	0x200009c1

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	@ 0x50
 8000b64:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	647b      	str	r3, [r7, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6a:	f000 fddf 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6e:	f000 f8e1 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b72:	f000 fa11 	bl	8000f98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b76:	f000 f9bb 	bl	8000ef0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b7a:	f000 f945 	bl	8000e08 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000b7e:	f000 f9e1 	bl	8000f44 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("main start()!!\r\n");
 8000b82:	4856      	ldr	r0, [pc, #344]	@ (8000cdc <main+0x17c>)
 8000b84:	f003 fe56 	bl	8004834 <puts>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000b88:	4855      	ldr	r0, [pc, #340]	@ (8000ce0 <main+0x180>)
 8000b8a:	f001 fe8f 	bl	80028ac <HAL_TIM_Base_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <main+0x38>
	  Error_Handler();
 8000b94:	f000 fba8 	bl	80012e8 <Error_Handler>

  // wifi
  printf("Start main() - wifi\r\n");
 8000b98:	4852      	ldr	r0, [pc, #328]	@ (8000ce4 <main+0x184>)
 8000b9a:	f003 fe4b 	bl	8004834 <puts>
  ret |= drv_uart_init();
 8000b9e:	f7ff ff77 	bl	8000a90 <drv_uart_init>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  ret |= drv_esp_init();
 8000baa:	f7ff fe63 	bl	8000874 <drv_esp_init>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	647b      	str	r3, [r7, #68]	@ 0x44
  if(ret != 0)
 8000bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d004      	beq.n	8000bc6 <main+0x66>
  {
	  printf("Esp response error\r\n");
 8000bbc:	484a      	ldr	r0, [pc, #296]	@ (8000ce8 <main+0x188>)
 8000bbe:	f003 fe39 	bl	8004834 <puts>
	  Error_Handler();
 8000bc2:	f000 fb91 	bl	80012e8 <Error_Handler>
  }

  AiotClient_Init();
 8000bc6:	f7ff ff1b 	bl	8000a00 <AiotClient_Init>

  // 초기 설정
  state_led = 0;			// 초기값이 green
 8000bca:	4b48      	ldr	r3, [pc, #288]	@ (8000cec <main+0x18c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
  time_led = GREEN_TIME;
 8000bd0:	4b47      	ldr	r3, [pc, #284]	@ (8000cf0 <main+0x190>)
 8000bd2:	2206      	movs	r2, #6
 8000bd4:	701a      	strb	r2, [r3, #0]
  set_led(state_led);
 8000bd6:	4b45      	ldr	r3, [pc, #276]	@ (8000cec <main+0x18c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff7e 	bl	8000adc <set_led>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000be0:	4944      	ldr	r1, [pc, #272]	@ (8000cf4 <main+0x194>)
 8000be2:	4845      	ldr	r0, [pc, #276]	@ (8000cf8 <main+0x198>)
 8000be4:	f003 ffac 	bl	8004b40 <strstr>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d01d      	beq.n	8000c2a <main+0xca>
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <main+0x198>)
 8000bf0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	4a40      	ldr	r2, [pc, #256]	@ (8000cf8 <main+0x198>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	d115      	bne.n	8000c2a <main+0xca>
	  {
		  //?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
		  strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000bfe:	215b      	movs	r1, #91	@ 0x5b
 8000c00:	483d      	ldr	r0, [pc, #244]	@ (8000cf8 <main+0x198>)
 8000c02:	f003 ff21 	bl	8004a48 <strchr>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	483c      	ldr	r0, [pc, #240]	@ (8000cfc <main+0x19c>)
 8000c0c:	f004 f821 	bl	8004c52 <strcpy>
		  memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000c10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c14:	2100      	movs	r1, #0
 8000c16:	4838      	ldr	r0, [pc, #224]	@ (8000cf8 <main+0x198>)
 8000c18:	f003 ff0e 	bl	8004a38 <memset>
		  cb_data.length = 0;
 8000c1c:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <main+0x198>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
		  esp_event(strBuff);
 8000c24:	4835      	ldr	r0, [pc, #212]	@ (8000cfc <main+0x19c>)
 8000c26:	f000 fa7b 	bl	8001120 <esp_event>
	  }
	  if(rx2Flag)
 8000c2a:	4b35      	ldr	r3, [pc, #212]	@ (8000d00 <main+0x1a0>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <main+0xe2>
	  {
		  printf("recv2 : %s\r\n",rx2Data);
 8000c34:	4933      	ldr	r1, [pc, #204]	@ (8000d04 <main+0x1a4>)
 8000c36:	4834      	ldr	r0, [pc, #208]	@ (8000d08 <main+0x1a8>)
 8000c38:	f003 fd8c 	bl	8004754 <iprintf>
		  rx2Flag =0;
 8000c3c:	4b30      	ldr	r3, [pc, #192]	@ (8000d00 <main+0x1a0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
//			printf("server connecting ...\r\n");
//			esp_client_conn();
//	  }


	  if(time3SecFlag)
 8000c42:	4b32      	ldr	r3, [pc, #200]	@ (8000d0c <main+0x1ac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0ca      	beq.n	8000be0 <main+0x80>
	  {
		  if(!(time3SecCnt%3))		// 서버랑 연결 안되면 3초에 한 번씩 재연결
 8000c4a:	4b31      	ldr	r3, [pc, #196]	@ (8000d10 <main+0x1b0>)
 8000c4c:	6819      	ldr	r1, [r3, #0]
 8000c4e:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <main+0x1b4>)
 8000c50:	fba3 2301 	umull	r2, r3, r3, r1
 8000c54:	085a      	lsrs	r2, r3, #1
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	1aca      	subs	r2, r1, r3
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d109      	bne.n	8000c76 <main+0x116>
		  {
			  if(esp_get_status() != 0)
 8000c62:	f7ff fde5 	bl	8000830 <esp_get_status>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <main+0x116>
			  {
					printf("server connecting ...\r\n");
 8000c6c:	482a      	ldr	r0, [pc, #168]	@ (8000d18 <main+0x1b8>)
 8000c6e:	f003 fde1 	bl	8004834 <puts>
					esp_client_conn();
 8000c72:	f7ff fdb1 	bl	80007d8 <esp_client_conn>
			  }
		  }

		  time3SecFlag = 0;
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <main+0x1ac>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
		  printf("led_names : %s \r\n", led_names[state_led]);
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <main+0x18c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <main+0x1bc>)
 8000c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4825      	ldr	r0, [pc, #148]	@ (8000d20 <main+0x1c0>)
 8000c8c:	f003 fd62 	bl	8004754 <iprintf>
		  printf("time_led : 00:%02d \r\n", time_led);
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <main+0x190>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4823      	ldr	r0, [pc, #140]	@ (8000d24 <main+0x1c4>)
 8000c98:	f003 fd5c 	bl	8004754 <iprintf>

		  // 신호등 상태, 시간 SQL(db)에 보내기
		  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2240      	movs	r2, #64	@ 0x40
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fec8 	bl	8004a38 <memset>
		  sprintf(sendBuf,"[%s]TIME@%d@%s@Z1\n","JAB_SQL", time_led, led_names[state_led]);
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <main+0x190>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <main+0x18c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <main+0x1bc>)
 8000cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cba:	1d38      	adds	r0, r7, #4
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <main+0x1c8>)
 8000cc2:	491a      	ldr	r1, [pc, #104]	@ (8000d2c <main+0x1cc>)
 8000cc4:	f003 fdbe 	bl	8004844 <siprintf>
		  esp_send_data(sendBuf);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff feac 	bl	8000a28 <esp_send_data>

		  printf("Debug send : %s\r\n",sendBuf);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4816      	ldr	r0, [pc, #88]	@ (8000d30 <main+0x1d0>)
 8000cd6:	f003 fd3d 	bl	8004754 <iprintf>
	  if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000cda:	e781      	b.n	8000be0 <main+0x80>
 8000cdc:	08005da0 	.word	0x08005da0
 8000ce0:	200008e0 	.word	0x200008e0
 8000ce4:	08005db0 	.word	0x08005db0
 8000ce8:	08005dc8 	.word	0x08005dc8
 8000cec:	200009c0 	.word	0x200009c0
 8000cf0:	200009c1 	.word	0x200009c1
 8000cf4:	08005ddc 	.word	0x08005ddc
 8000cf8:	200004d8 	.word	0x200004d8
 8000cfc:	200009c4 	.word	0x200009c4
 8000d00:	200004a0 	.word	0x200004a0
 8000d04:	200004a4 	.word	0x200004a4
 8000d08:	08005de4 	.word	0x08005de4
 8000d0c:	200009b8 	.word	0x200009b8
 8000d10:	200009bc 	.word	0x200009bc
 8000d14:	aaaaaaab 	.word	0xaaaaaaab
 8000d18:	08005df4 	.word	0x08005df4
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	08005e0c 	.word	0x08005e0c
 8000d24:	08005e20 	.word	0x08005e20
 8000d28:	08005e38 	.word	0x08005e38
 8000d2c:	08005e40 	.word	0x08005e40
 8000d30:	08005e54 	.word	0x08005e54

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b094      	sub	sp, #80	@ 0x50
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	2230      	movs	r2, #48	@ 0x30
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fe78 	bl	8004a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	4a27      	ldr	r2, [pc, #156]	@ (8000e00 <SystemClock_Config+0xcc>)
 8000d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d68:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <SystemClock_Config+0xcc>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <SystemClock_Config+0xd0>)
 8000d7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <SystemClock_Config+0xd0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d90:	2302      	movs	r3, #2
 8000d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	2301      	movs	r3, #1
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000da4:	2310      	movs	r3, #16
 8000da6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000da8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000dac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dae:	2304      	movs	r3, #4
 8000db0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db2:	2304      	movs	r3, #4
 8000db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 f88e 	bl	8001edc <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dc6:	f000 fa8f 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2102      	movs	r1, #2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 faf0 	bl	80023cc <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000df2:	f000 fa79 	bl	80012e8 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3750      	adds	r7, #80	@ 0x50
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	@ 0x38
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000eec <MX_TIM3_Init+0xe4>)
 8000e3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e40:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e4e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e60:	4821      	ldr	r0, [pc, #132]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e62:	f001 fcd3 	bl	800280c <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e6c:	f000 fa3c 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481a      	ldr	r0, [pc, #104]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e7e:	f001 ff1d 	bl	8002cbc <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e88:	f000 fa2e 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e8c:	4816      	ldr	r0, [pc, #88]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000e8e:	f001 fd6f 	bl	8002970 <HAL_TIM_OC_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e98:	f000 fa26 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000eac:	f002 faa2 	bl	80033f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000eb6:	f000 fa17 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_TIM3_Init+0xe0>)
 8000ed2:	f001 fe97 	bl	8002c04 <HAL_TIM_OC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000edc:	f000 fa04 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3738      	adds	r7, #56	@ 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200008e0 	.word	0x200008e0
 8000eec:	40000400 	.word	0x40000400

08000ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <MX_USART2_UART_Init+0x50>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f28:	f002 fae6 	bl	80034f8 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f32:	f000 f9d9 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000928 	.word	0x20000928
 8000f40:	40004400 	.word	0x40004400

08000f44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <MX_USART6_UART_Init+0x50>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f50:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_USART6_UART_Init+0x4c>)
 8000f7c:	f002 fabc 	bl	80034f8 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f86:	f000 f9af 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000970 	.word	0x20000970
 8000f94:	40011400 	.word	0x40011400

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b37      	ldr	r3, [pc, #220]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a36      	ldr	r2, [pc, #216]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b34      	ldr	r3, [pc, #208]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a28      	ldr	r2, [pc, #160]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <MX_GPIO_Init+0xf8>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <MX_GPIO_Init+0xf8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2120      	movs	r1, #32
 8001022:	481c      	ldr	r0, [pc, #112]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8001024:	f000 ff40 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Red_Pin_Pin|Yellow_Pin_Pin|Green_Pin_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2170      	movs	r1, #112	@ 0x70
 800102c:	481a      	ldr	r0, [pc, #104]	@ (8001098 <MX_GPIO_Init+0x100>)
 800102e:	f000 ff3b 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001032:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001038:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4814      	ldr	r0, [pc, #80]	@ (800109c <MX_GPIO_Init+0x104>)
 800104a:	f000 fda9 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800104e:	2320      	movs	r3, #32
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480b      	ldr	r0, [pc, #44]	@ (8001094 <MX_GPIO_Init+0xfc>)
 8001066:	f000 fd9b 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_Pin_Pin Yellow_Pin_Pin Green_Pin_Pin */
  GPIO_InitStruct.Pin = Red_Pin_Pin|Yellow_Pin_Pin|Green_Pin_Pin;
 800106a:	2370      	movs	r3, #112	@ 0x70
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_GPIO_Init+0x100>)
 8001082:	f000 fd8d 	bl	8001ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	@ 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	40020800 	.word	0x40020800

080010a0 <HAL_TIM_PeriodElapsedCallback>:
//  return ch;
//}

// TIM3 인터럽트 콜백
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d126      	bne.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x60>
    {
    	time3SecCnt++;
 80010b2:	4b16      	ldr	r3, [pc, #88]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010ba:	6013      	str	r3, [r2, #0]
    	time3SecFlag = 1;
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
        if (time_led > 0)
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <HAL_TIM_PeriodElapsedCallback+0x38>
        {
            time_led--;   // 남은 시간 감소
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010d4:	701a      	strb	r2, [r3, #0]
            // 다음 신호등 상태로 전환
            state_led = (state_led + 1) % 3;
            set_led(state_led);
        }
    }
}
 80010d6:	e013      	b.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x60>
            state_led = (state_led + 1) % 3;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80010e0:	fb83 3102 	smull	r3, r1, r3, r2
 80010e4:	17d3      	asrs	r3, r2, #31
 80010e6:	1ac9      	subs	r1, r1, r3
 80010e8:	460b      	mov	r3, r1
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	440b      	add	r3, r1
 80010ee:	1ad1      	subs	r1, r2, r3
 80010f0:	b2ca      	uxtb	r2, r1
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010f4:	701a      	strb	r2, [r3, #0]
            set_led(state_led);
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fcee 	bl	8000adc <set_led>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40000400 	.word	0x40000400
 800110c:	200009bc 	.word	0x200009bc
 8001110:	200009b8 	.word	0x200009b8
 8001114:	200009c1 	.word	0x200009c1
 8001118:	200009c0 	.word	0x200009c0
 800111c:	55555556 	.word	0x55555556

08001120 <esp_event>:

// wifi event
void esp_event(char * recvBuf)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b09c      	sub	sp, #112	@ 0x70
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
	printf("wifi test!!!\r\n");
 8001128:	485b      	ldr	r0, [pc, #364]	@ (8001298 <esp_event+0x178>)
 800112a:	f003 fb83 	bl	8004834 <puts>
  int i=0;
 800112e:	2300      	movs	r3, #0
 8001130:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001132:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2240      	movs	r2, #64	@ 0x40
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fc74 	bl	8004a38 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f84f 	bl	80001f4 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	3b01      	subs	r3, #1
 800115a:	4a50      	ldr	r2, [pc, #320]	@ (800129c <esp_event+0x17c>)
 800115c:	2100      	movs	r1, #0
 800115e:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	484f      	ldr	r0, [pc, #316]	@ (80012a0 <esp_event+0x180>)
 8001164:	f003 faf6 	bl	8004754 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8001168:	494e      	ldr	r1, [pc, #312]	@ (80012a4 <esp_event+0x184>)
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f003 fc8c 	bl	8004a88 <strtok>
 8001170:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001172:	e011      	b.n	8001198 <esp_event+0x78>
  {
    pArray[i] = pToken;
 8001174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	3368      	adds	r3, #104	@ 0x68
 800117a:	443b      	add	r3, r7
 800117c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800117e:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8001182:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001184:	3301      	adds	r3, #1
 8001186:	667b      	str	r3, [r7, #100]	@ 0x64
 8001188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800118a:	2b04      	cmp	r3, #4
 800118c:	dc08      	bgt.n	80011a0 <esp_event+0x80>
      break;
    pToken = strtok(NULL,"[@]");
 800118e:	4945      	ldr	r1, [pc, #276]	@ (80012a4 <esp_event+0x184>)
 8001190:	2000      	movs	r0, #0
 8001192:	f003 fc79 	bl	8004a88 <strtok>
 8001196:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001198:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ea      	bne.n	8001174 <esp_event+0x54>
 800119e:	e000      	b.n	80011a2 <esp_event+0x82>
      break;
 80011a0:	bf00      	nop
  }

  if(!strcmp(pArray[1],"STATE"))
 80011a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011a4:	4940      	ldr	r1, [pc, #256]	@ (80012a8 <esp_event+0x188>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f81a 	bl	80001e0 <strcmp>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d120      	bne.n	80011f4 <esp_event+0xd4>
  {
  	if(!strcmp(pArray[2],"GET"))
 80011b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011b4:	493d      	ldr	r1, [pc, #244]	@ (80012ac <esp_event+0x18c>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f812 	bl	80001e0 <strcmp>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <esp_event+0xd4>
  	{
  		printf(">>>>>state test\r\n");
 80011c2:	483b      	ldr	r0, [pc, #236]	@ (80012b0 <esp_event+0x190>)
 80011c4:	f003 fb36 	bl	8004834 <puts>

  	  	// [JAB_SQL]STATE@RED@Z1
  	  	printf("state_led = %s\r\n", led_names[state_led]);
 80011c8:	4b3a      	ldr	r3, [pc, #232]	@ (80012b4 <esp_event+0x194>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <esp_event+0x198>)
 80011d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4839      	ldr	r0, [pc, #228]	@ (80012bc <esp_event+0x19c>)
 80011d8:	f003 fabc 	bl	8004754 <iprintf>
  	  	sprintf(sendBuf,"[%s]STATE@%s@Z1\n","JAB_SQL", led_names[state_led]);
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <esp_event+0x194>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b35      	ldr	r3, [pc, #212]	@ (80012b8 <esp_event+0x198>)
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	f107 000c 	add.w	r0, r7, #12
 80011ec:	4a34      	ldr	r2, [pc, #208]	@ (80012c0 <esp_event+0x1a0>)
 80011ee:	4935      	ldr	r1, [pc, #212]	@ (80012c4 <esp_event+0x1a4>)
 80011f0:	f003 fb28 	bl	8004844 <siprintf>
  	}
  }

  if(!strcmp(pArray[1],"TIME"))
 80011f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011f6:	4934      	ldr	r1, [pc, #208]	@ (80012c8 <esp_event+0x1a8>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7fe fff1 	bl	80001e0 <strcmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d122      	bne.n	800124a <esp_event+0x12a>
  {
  	if(!strcmp(pArray[2],"GET"))
 8001204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001206:	4929      	ldr	r1, [pc, #164]	@ (80012ac <esp_event+0x18c>)
 8001208:	4618      	mov	r0, r3
 800120a:	f7fe ffe9 	bl	80001e0 <strcmp>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d12f      	bne.n	8001274 <esp_event+0x154>
  	{
  		printf(">>>>time test\r\n");
 8001214:	482d      	ldr	r0, [pc, #180]	@ (80012cc <esp_event+0x1ac>)
 8001216:	f003 fb0d 	bl	8004834 <puts>

  	  	// [JAB_SQL]TIME@20@RED@Z1
  	  	printf("time_led = %d\r\n", time_led);
 800121a:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <esp_event+0x1b0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	482c      	ldr	r0, [pc, #176]	@ (80012d4 <esp_event+0x1b4>)
 8001222:	f003 fa97 	bl	8004754 <iprintf>
  	  	sprintf(sendBuf,"[%s]TIME@%d@%s@Z1\n","JAB_SQL", time_led, led_names[state_led]);
 8001226:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <esp_event+0x1b0>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4619      	mov	r1, r3
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <esp_event+0x194>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <esp_event+0x198>)
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	f107 000c 	add.w	r0, r7, #12
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	460b      	mov	r3, r1
 8001240:	4a1f      	ldr	r2, [pc, #124]	@ (80012c0 <esp_event+0x1a0>)
 8001242:	4925      	ldr	r1, [pc, #148]	@ (80012d8 <esp_event+0x1b8>)
 8001244:	f003 fafe 	bl	8004844 <siprintf>
 8001248:	e014      	b.n	8001274 <esp_event+0x154>
  	}
  }

  else if(!strncmp(pArray[1]," New conn",8))
 800124a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800124c:	2208      	movs	r2, #8
 800124e:	4923      	ldr	r1, [pc, #140]	@ (80012dc <esp_event+0x1bc>)
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fc06 	bl	8004a62 <strncmp>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d017      	beq.n	800128c <esp_event+0x16c>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 800125c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800125e:	2208      	movs	r2, #8
 8001260:	491f      	ldr	r1, [pc, #124]	@ (80012e0 <esp_event+0x1c0>)
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fbfd 	bl	8004a62 <strncmp>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d110      	bne.n	8001290 <esp_event+0x170>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 800126e:	f7ff fab3 	bl	80007d8 <esp_client_conn>
      return;
 8001272:	e00e      	b.n	8001292 <esp_event+0x172>
  }
  else
      return;

  esp_send_data(sendBuf);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fbd5 	bl	8000a28 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <esp_event+0x1c4>)
 8001286:	f003 fa65 	bl	8004754 <iprintf>
 800128a:	e002      	b.n	8001292 <esp_event+0x172>
     return;
 800128c:	bf00      	nop
 800128e:	e000      	b.n	8001292 <esp_event+0x172>
      return;
 8001290:	bf00      	nop
}
 8001292:	3768      	adds	r7, #104	@ 0x68
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	08005e68 	.word	0x08005e68
 800129c:	200009c4 	.word	0x200009c4
 80012a0:	08005e78 	.word	0x08005e78
 80012a4:	08005e8c 	.word	0x08005e8c
 80012a8:	08005e90 	.word	0x08005e90
 80012ac:	08005e98 	.word	0x08005e98
 80012b0:	08005e9c 	.word	0x08005e9c
 80012b4:	200009c0 	.word	0x200009c0
 80012b8:	20000000 	.word	0x20000000
 80012bc:	08005eb0 	.word	0x08005eb0
 80012c0:	08005e38 	.word	0x08005e38
 80012c4:	08005ec4 	.word	0x08005ec4
 80012c8:	08005ed8 	.word	0x08005ed8
 80012cc:	08005ee0 	.word	0x08005ee0
 80012d0:	200009c1 	.word	0x200009c1
 80012d4:	08005ef0 	.word	0x08005ef0
 80012d8:	08005e40 	.word	0x08005e40
 80012dc:	08005f00 	.word	0x08005f00
 80012e0:	08005f0c 	.word	0x08005f0c
 80012e4:	08005e54 	.word	0x08005e54

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <Error_Handler+0x8>

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001332:	2007      	movs	r0, #7
 8001334:	f000 fb60 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d115      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	201d      	movs	r0, #29
 8001378:	f000 fb49 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800137c:	201d      	movs	r0, #29
 800137e:	f000 fb62 	bl	8001a46 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40000400 	.word	0x40000400
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a36      	ldr	r2, [pc, #216]	@ (800148c <HAL_UART_MspInit+0xf8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12c      	bne.n	8001410 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4a34      	ldr	r2, [pc, #208]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c6:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a2d      	ldr	r2, [pc, #180]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ee:	230c      	movs	r3, #12
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fe:	2307      	movs	r3, #7
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4822      	ldr	r0, [pc, #136]	@ (8001494 <HAL_UART_MspInit+0x100>)
 800140a:	f000 fbc9 	bl	8001ba0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800140e:	e038      	b.n	8001482 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a20      	ldr	r2, [pc, #128]	@ (8001498 <HAL_UART_MspInit+0x104>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d133      	bne.n	8001482 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6453      	str	r3, [r2, #68]	@ 0x44
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_UART_MspInit+0xfc>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001452:	23c0      	movs	r3, #192	@ 0xc0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001462:	2308      	movs	r3, #8
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	480b      	ldr	r0, [pc, #44]	@ (800149c <HAL_UART_MspInit+0x108>)
 800146e:	f000 fb97 	bl	8001ba0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2047      	movs	r0, #71	@ 0x47
 8001478:	f000 fac9 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800147c:	2047      	movs	r0, #71	@ 0x47
 800147e:	f000 fae2 	bl	8001a46 <HAL_NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3730      	adds	r7, #48	@ 0x30
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40004400 	.word	0x40004400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000
 8001498:	40011400 	.word	0x40011400
 800149c:	40020800 	.word	0x40020800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <NMI_Handler+0x4>

080014a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <MemManage_Handler+0x4>

080014b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f96b 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <TIM3_IRQHandler+0x10>)
 8001506:	f001 fa8c 	bl	8002a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200008e0 	.word	0x200008e0

08001514 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <USART6_IRQHandler+0x10>)
 800151a:	f002 f8ed 	bl	80036f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000970 	.word	0x20000970

08001528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_kill>:

int _kill(int pid, int sig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001542:	f003 fb59 	bl	8004bf8 <__errno>
 8001546:	4603      	mov	r3, r0
 8001548:	2216      	movs	r2, #22
 800154a:	601a      	str	r2, [r3, #0]
  return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_exit>:

void _exit (int status)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffe7 	bl	8001538 <_kill>
  while (1) {}    /* Make sure we hang here */
 800156a:	bf00      	nop
 800156c:	e7fd      	b.n	800156a <_exit+0x12>

0800156e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e00a      	b.n	8001596 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001580:	f3af 8000 	nop.w
 8001584:	4601      	mov	r1, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	60ba      	str	r2, [r7, #8]
 800158c:	b2ca      	uxtb	r2, r1
 800158e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	dbf0      	blt.n	8001580 <_read+0x12>
  }

  return len;
 800159e:	687b      	ldr	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e009      	b.n	80015ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	60ba      	str	r2, [r7, #8]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fa72 	bl	8000aac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbf1      	blt.n	80015ba <_write+0x12>
  }
  return len;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_close>:

int _close(int file)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001608:	605a      	str	r2, [r3, #4]
  return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_isatty>:

int _isatty(int file)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f003 fabe 	bl	8004bf8 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20020000 	.word	0x20020000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	20000a04 	.word	0x20000a04
 80016b0:	20000b58 	.word	0x20000b58

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001710 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016dc:	f7ff ffea 	bl	80016b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	@ (8001714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	@ (8001718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f003 fa7d 	bl	8004c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fa29 	bl	8000b60 <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800171c:	08006024 	.word	0x08006024
  ldr r2, =_sbss
 8001720:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001724:	20000b58 	.word	0x20000b58

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	@ (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f94f 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff fdc8 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f967 	bl	8001a62 <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f92f 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000014 	.word	0x20000014
 80017cc:	20000010 	.word	0x20000010

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000014 	.word	0x20000014
 80017f4:	20000a08 	.word	0x20000a08

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000a08 	.word	0x20000a08

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000014 	.word	0x20000014

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	@ (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	@ (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	@ 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff3e 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff8e 	bl	800194c <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5d 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff31 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff feb6 	bl	80017f8 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d008      	beq.n	8001aac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2280      	movs	r2, #128	@ 0x80
 8001a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e052      	b.n	8001b52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0216 	bic.w	r2, r2, #22
 8001aba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001aca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d103      	bne.n	8001adc <HAL_DMA_Abort+0x62>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0208 	bic.w	r2, r2, #8
 8001aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afc:	e013      	b.n	8001b26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afe:	f7ff fe7b 	bl	80017f8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d90c      	bls.n	8001b26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2203      	movs	r2, #3
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e015      	b.n	8001b52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1e4      	bne.n	8001afe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	223f      	movs	r2, #63	@ 0x3f
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d004      	beq.n	8001b78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e00c      	b.n	8001b92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2205      	movs	r2, #5
 8001b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e159      	b.n	8001e70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8148 	bne.w	8001e6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a2 	beq.w	8001e6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b57      	ldr	r3, [pc, #348]	@ (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a56      	ldr	r2, [pc, #344]	@ (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b54      	ldr	r3, [pc, #336]	@ (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d42:	4a52      	ldr	r2, [pc, #328]	@ (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a49      	ldr	r2, [pc, #292]	@ (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x202>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a48      	ldr	r2, [pc, #288]	@ (8001e94 <HAL_GPIO_Init+0x2f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x1fe>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a47      	ldr	r2, [pc, #284]	@ (8001e98 <HAL_GPIO_Init+0x2f8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x1fa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a46      	ldr	r2, [pc, #280]	@ (8001e9c <HAL_GPIO_Init+0x2fc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x1f6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a45      	ldr	r2, [pc, #276]	@ (8001ea0 <HAL_GPIO_Init+0x300>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x1f2>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x204>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	@ (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a24      	ldr	r2, [pc, #144]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e16:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e40:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f aea2 	bls.w	8001bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec4:	e003      	b.n	8001ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e267      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d075      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001efa:	4b88      	ldr	r3, [pc, #544]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d00c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4b85      	ldr	r3, [pc, #532]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d112      	bne.n	8001f38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f12:	4b82      	ldr	r3, [pc, #520]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f1e:	d10b      	bne.n	8001f38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	4b7e      	ldr	r3, [pc, #504]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d05b      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x108>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d157      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e242      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f40:	d106      	bne.n	8001f50 <HAL_RCC_OscConfig+0x74>
 8001f42:	4b76      	ldr	r3, [pc, #472]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a75      	ldr	r2, [pc, #468]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xb0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x98>
 8001f5a:	4b70      	ldr	r3, [pc, #448]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b6d      	ldr	r3, [pc, #436]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6c      	ldr	r2, [pc, #432]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xb0>
 8001f74:	4b69      	ldr	r3, [pc, #420]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a68      	ldr	r2, [pc, #416]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b66      	ldr	r3, [pc, #408]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a65      	ldr	r2, [pc, #404]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fc30 	bl	80017f8 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fc2c 	bl	80017f8 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	@ 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e207      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b5b      	ldr	r3, [pc, #364]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xc0>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fc1c 	bl	80017f8 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fc18 	bl	80017f8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	@ 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1f3      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b51      	ldr	r3, [pc, #324]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0xe8>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d063      	beq.n	80020ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200a:	4b44      	ldr	r3, [pc, #272]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x152>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1c7      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4937      	ldr	r1, [pc, #220]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e03a      	b.n	80020ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <HAL_RCC_OscConfig+0x244>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7ff fbd1 	bl	80017f8 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7ff fbcd 	bl	80017f8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1a8      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b28      	ldr	r3, [pc, #160]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4925      	ldr	r1, [pc, #148]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <HAL_RCC_OscConfig+0x244>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fbb0 	bl	80017f8 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff fbac 	bl	80017f8 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e187      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d036      	beq.n	8002134 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d016      	beq.n	80020fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <HAL_RCC_OscConfig+0x248>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7ff fb90 	bl	80017f8 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff fb8c 	bl	80017f8 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e167      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_OscConfig+0x240>)
 80020f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x200>
 80020fa:	e01b      	b.n	8002134 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_RCC_OscConfig+0x248>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fb79 	bl	80017f8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	e00e      	b.n	8002128 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210a:	f7ff fb75 	bl	80017f8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d907      	bls.n	8002128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e150      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
 800211c:	40023800 	.word	0x40023800
 8002120:	42470000 	.word	0x42470000
 8002124:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b88      	ldr	r3, [pc, #544]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 800212a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ea      	bne.n	800210a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8097 	beq.w	8002270 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b81      	ldr	r3, [pc, #516]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b7d      	ldr	r3, [pc, #500]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	4a7c      	ldr	r2, [pc, #496]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002160:	6413      	str	r3, [r2, #64]	@ 0x40
 8002162:	4b7a      	ldr	r3, [pc, #488]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b77      	ldr	r3, [pc, #476]	@ (8002350 <HAL_RCC_OscConfig+0x474>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d118      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217e:	4b74      	ldr	r3, [pc, #464]	@ (8002350 <HAL_RCC_OscConfig+0x474>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a73      	ldr	r2, [pc, #460]	@ (8002350 <HAL_RCC_OscConfig+0x474>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218a:	f7ff fb35 	bl	80017f8 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7ff fb31 	bl	80017f8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e10c      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_RCC_OscConfig+0x474>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x2ea>
 80021b8:	4b64      	ldr	r3, [pc, #400]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	4a63      	ldr	r2, [pc, #396]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c4:	e01c      	b.n	8002200 <HAL_RCC_OscConfig+0x324>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x30c>
 80021ce:	4b5f      	ldr	r3, [pc, #380]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d2:	4a5e      	ldr	r2, [pc, #376]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021da:	4b5c      	ldr	r3, [pc, #368]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	4a5b      	ldr	r2, [pc, #364]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0x324>
 80021e8:	4b58      	ldr	r3, [pc, #352]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ec:	4a57      	ldr	r2, [pc, #348]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f4:	4b55      	ldr	r3, [pc, #340]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f8:	4a54      	ldr	r2, [pc, #336]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80021fa:	f023 0304 	bic.w	r3, r3, #4
 80021fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d015      	beq.n	8002234 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff faf6 	bl	80017f8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7ff faf2 	bl	80017f8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e0cb      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002226:	4b49      	ldr	r3, [pc, #292]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0ee      	beq.n	8002210 <HAL_RCC_OscConfig+0x334>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002234:	f7ff fae0 	bl	80017f8 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7ff fadc 	bl	80017f8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0b5      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	4b3e      	ldr	r3, [pc, #248]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1ee      	bne.n	800223c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002264:	4b39      	ldr	r3, [pc, #228]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	4a38      	ldr	r2, [pc, #224]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a1 	beq.w	80023bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800227a:	4b34      	ldr	r3, [pc, #208]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b08      	cmp	r3, #8
 8002284:	d05c      	beq.n	8002340 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d141      	bne.n	8002312 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <HAL_RCC_OscConfig+0x478>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fab0 	bl	80017f8 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff faac 	bl	80017f8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e087      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	4b27      	ldr	r3, [pc, #156]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	3b01      	subs	r3, #1
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	061b      	lsls	r3, r3, #24
 80022de:	491b      	ldr	r1, [pc, #108]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCC_OscConfig+0x478>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fa85 	bl	80017f8 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff fa81 	bl	80017f8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e05c      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x416>
 8002310:	e054      	b.n	80023bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <HAL_RCC_OscConfig+0x478>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7ff fa6e 	bl	80017f8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7ff fa6a 	bl	80017f8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e045      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_RCC_OscConfig+0x470>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x444>
 800233e:	e03d      	b.n	80023bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e038      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000
 8002354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_RCC_OscConfig+0x4ec>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d028      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d121      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d11a      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800238e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002390:	4293      	cmp	r3, r2
 8002392:	d111      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0cc      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b68      	ldr	r3, [pc, #416]	@ (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d90c      	bls.n	8002408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b65      	ldr	r3, [pc, #404]	@ (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0b8      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002420:	4b59      	ldr	r3, [pc, #356]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a58      	ldr	r2, [pc, #352]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800242a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002438:	4b53      	ldr	r3, [pc, #332]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a52      	ldr	r2, [pc, #328]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b50      	ldr	r3, [pc, #320]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	494d      	ldr	r1, [pc, #308]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d044      	beq.n	80024ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b47      	ldr	r3, [pc, #284]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d119      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07f      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d003      	beq.n	800248a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002486:	2b03      	cmp	r3, #3
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248a:	4b3f      	ldr	r3, [pc, #252]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06f      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249a:	4b3b      	ldr	r3, [pc, #236]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e067      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024aa:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f023 0203 	bic.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4934      	ldr	r1, [pc, #208]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024bc:	f7ff f99c 	bl	80017f8 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	e00a      	b.n	80024da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c4:	f7ff f998 	bl	80017f8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e04f      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	4b2b      	ldr	r3, [pc, #172]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 020c 	and.w	r2, r3, #12
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1eb      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ec:	4b25      	ldr	r3, [pc, #148]	@ (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d20c      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b20      	ldr	r3, [pc, #128]	@ (8002584 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e032      	b.n	800257a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4916      	ldr	r1, [pc, #88]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	490e      	ldr	r1, [pc, #56]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002552:	f000 f821 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002556:	4602      	mov	r2, r0
 8002558:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	490a      	ldr	r1, [pc, #40]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	5ccb      	ldrb	r3, [r1, r3]
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f8fc 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023c00 	.word	0x40023c00
 8002588:	40023800 	.word	0x40023800
 800258c:	08005f1c 	.word	0x08005f1c
 8002590:	2000000c 	.word	0x2000000c
 8002594:	20000010 	.word	0x20000010

08002598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800259c:	b094      	sub	sp, #80	@ 0x50
 800259e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b0:	4b79      	ldr	r3, [pc, #484]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d00d      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x40>
 80025bc:	2b08      	cmp	r3, #8
 80025be:	f200 80e1 	bhi.w	8002784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x34>
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ca:	e0db      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b73      	ldr	r3, [pc, #460]	@ (800279c <HAL_RCC_GetSysClockFreq+0x204>)
 80025ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025d0:	e0db      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025d2:	4b73      	ldr	r3, [pc, #460]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80025d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025d6:	e0d8      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x200>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d063      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	099b      	lsrs	r3, r3, #6
 80025f4:	2200      	movs	r2, #0
 80025f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002600:	633b      	str	r3, [r7, #48]	@ 0x30
 8002602:	2300      	movs	r3, #0
 8002604:	637b      	str	r3, [r7, #52]	@ 0x34
 8002606:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800260a:	4622      	mov	r2, r4
 800260c:	462b      	mov	r3, r5
 800260e:	f04f 0000 	mov.w	r0, #0
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	0159      	lsls	r1, r3, #5
 8002618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800261c:	0150      	lsls	r0, r2, #5
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4621      	mov	r1, r4
 8002624:	1a51      	subs	r1, r2, r1
 8002626:	6139      	str	r1, [r7, #16]
 8002628:	4629      	mov	r1, r5
 800262a:	eb63 0301 	sbc.w	r3, r3, r1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800263c:	4659      	mov	r1, fp
 800263e:	018b      	lsls	r3, r1, #6
 8002640:	4651      	mov	r1, sl
 8002642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002646:	4651      	mov	r1, sl
 8002648:	018a      	lsls	r2, r1, #6
 800264a:	4651      	mov	r1, sl
 800264c:	ebb2 0801 	subs.w	r8, r2, r1
 8002650:	4659      	mov	r1, fp
 8002652:	eb63 0901 	sbc.w	r9, r3, r1
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800266a:	4690      	mov	r8, r2
 800266c:	4699      	mov	r9, r3
 800266e:	4623      	mov	r3, r4
 8002670:	eb18 0303 	adds.w	r3, r8, r3
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	462b      	mov	r3, r5
 8002678:	eb49 0303 	adc.w	r3, r9, r3
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800268a:	4629      	mov	r1, r5
 800268c:	024b      	lsls	r3, r1, #9
 800268e:	4621      	mov	r1, r4
 8002690:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002694:	4621      	mov	r1, r4
 8002696:	024a      	lsls	r2, r1, #9
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800269e:	2200      	movs	r2, #0
 80026a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026a8:	f7fd fe02 	bl	80002b0 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4613      	mov	r3, r2
 80026b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026b4:	e058      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b38      	ldr	r3, [pc, #224]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	2200      	movs	r2, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	4611      	mov	r1, r2
 80026c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80026cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026d0:	4642      	mov	r2, r8
 80026d2:	464b      	mov	r3, r9
 80026d4:	f04f 0000 	mov.w	r0, #0
 80026d8:	f04f 0100 	mov.w	r1, #0
 80026dc:	0159      	lsls	r1, r3, #5
 80026de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e2:	0150      	lsls	r0, r2, #5
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4641      	mov	r1, r8
 80026ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ee:	4649      	mov	r1, r9
 80026f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002700:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002704:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002708:	ebb2 040a 	subs.w	r4, r2, sl
 800270c:	eb63 050b 	sbc.w	r5, r3, fp
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	00eb      	lsls	r3, r5, #3
 800271a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800271e:	00e2      	lsls	r2, r4, #3
 8002720:	4614      	mov	r4, r2
 8002722:	461d      	mov	r5, r3
 8002724:	4643      	mov	r3, r8
 8002726:	18e3      	adds	r3, r4, r3
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	464b      	mov	r3, r9
 800272c:	eb45 0303 	adc.w	r3, r5, r3
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800273e:	4629      	mov	r1, r5
 8002740:	028b      	lsls	r3, r1, #10
 8002742:	4621      	mov	r1, r4
 8002744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002748:	4621      	mov	r1, r4
 800274a:	028a      	lsls	r2, r1, #10
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002752:	2200      	movs	r2, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	61fa      	str	r2, [r7, #28]
 8002758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800275c:	f7fd fda8 	bl	80002b0 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4613      	mov	r3, r2
 8002766:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x200>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800277a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002782:	e002      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_RCC_GetSysClockFreq+0x204>)
 8002786:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800278c:	4618      	mov	r0, r3
 800278e:	3750      	adds	r7, #80	@ 0x50
 8002790:	46bd      	mov	sp, r7
 8002792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	007a1200 	.word	0x007a1200

080027a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a8:	4b03      	ldr	r3, [pc, #12]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	2000000c 	.word	0x2000000c

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c0:	f7ff fff0 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0a9b      	lsrs	r3, r3, #10
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4903      	ldr	r1, [pc, #12]	@ (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	08005f2c 	.word	0x08005f2c

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e8:	f7ff ffdc 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0b5b      	lsrs	r3, r3, #13
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	@ (8002808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	08005f2c 	.word	0x08005f2c

0800280c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fd86 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 fb26 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d001      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e044      	b.n	800294e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1e      	ldr	r2, [pc, #120]	@ (800295c <HAL_TIM_Base_Start_IT+0xb0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d018      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x6c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ee:	d013      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x6c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002960 <HAL_TIM_Base_Start_IT+0xb4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00e      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x6c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a19      	ldr	r2, [pc, #100]	@ (8002964 <HAL_TIM_Base_Start_IT+0xb8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d009      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x6c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a17      	ldr	r2, [pc, #92]	@ (8002968 <HAL_TIM_Base_Start_IT+0xbc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x6c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a16      	ldr	r2, [pc, #88]	@ (800296c <HAL_TIM_Base_Start_IT+0xc0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d111      	bne.n	800293c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b06      	cmp	r3, #6
 8002928:	d010      	beq.n	800294c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293a:	e007      	b.n	800294c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800
 8002968:	40000c00 	.word	0x40000c00
 800296c:	40014000 	.word	0x40014000

08002970 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e041      	b.n	8002a06 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f839 	bl	8002a0e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f000 fa74 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01b      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f06f 0202 	mvn.w	r2, #2
 8002a56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f9f6 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002a72:	e005      	b.n	8002a80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f9e8 	bl	8002e4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9f9 	bl	8002e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01b      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 0204 	mvn.w	r2, #4
 8002aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f9d0 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002abe:	e005      	b.n	8002acc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f9c2 	bl	8002e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f9d3 	bl	8002e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01b      	beq.n	8002b1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0208 	mvn.w	r2, #8
 8002aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2204      	movs	r2, #4
 8002af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f9aa 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002b0a:	e005      	b.n	8002b18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f99c 	bl	8002e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f9ad 	bl	8002e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01b      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f06f 0210 	mvn.w	r2, #16
 8002b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2208      	movs	r2, #8
 8002b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f984 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002b56:	e005      	b.n	8002b64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f976 	bl	8002e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f987 	bl	8002e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00c      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0201 	mvn.w	r2, #1
 8002b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fe fa89 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00c      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fc99 	bl	80034e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00c      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f958 	bl	8002e86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00c      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0220 	mvn.w	r2, #32
 8002bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fc6b 	bl	80034d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e048      	b.n	8002cb4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d839      	bhi.n	8002ca4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002c30:	a201      	add	r2, pc, #4	@ (adr r2, 8002c38 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c6d 	.word	0x08002c6d
 8002c3c:	08002ca5 	.word	0x08002ca5
 8002c40:	08002ca5 	.word	0x08002ca5
 8002c44:	08002ca5 	.word	0x08002ca5
 8002c48:	08002c7b 	.word	0x08002c7b
 8002c4c:	08002ca5 	.word	0x08002ca5
 8002c50:	08002ca5 	.word	0x08002ca5
 8002c54:	08002ca5 	.word	0x08002ca5
 8002c58:	08002c89 	.word	0x08002c89
 8002c5c:	08002ca5 	.word	0x08002ca5
 8002c60:	08002ca5 	.word	0x08002ca5
 8002c64:	08002ca5 	.word	0x08002ca5
 8002c68:	08002c97 	.word	0x08002c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f998 	bl	8002fa8 <TIM_OC1_SetConfig>
      break;
 8002c78:	e017      	b.n	8002caa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f9f7 	bl	8003074 <TIM_OC2_SetConfig>
      break;
 8002c86:	e010      	b.n	8002caa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fa5c 	bl	800314c <TIM_OC3_SetConfig>
      break;
 8002c94:	e009      	b.n	8002caa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fabf 	bl	8003220 <TIM_OC4_SetConfig>
      break;
 8002ca2:	e002      	b.n	8002caa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0b4      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x186>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d10:	d03e      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0xd4>
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d16:	f200 8087 	bhi.w	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d1e:	f000 8086 	beq.w	8002e2e <HAL_TIM_ConfigClockSource+0x172>
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d26:	d87f      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b70      	cmp	r3, #112	@ 0x70
 8002d2a:	d01a      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0xa6>
 8002d2c:	2b70      	cmp	r3, #112	@ 0x70
 8002d2e:	d87b      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b60      	cmp	r3, #96	@ 0x60
 8002d32:	d050      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d34:	2b60      	cmp	r3, #96	@ 0x60
 8002d36:	d877      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b50      	cmp	r3, #80	@ 0x50
 8002d3a:	d03c      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d3c:	2b50      	cmp	r3, #80	@ 0x50
 8002d3e:	d873      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b40      	cmp	r3, #64	@ 0x40
 8002d42:	d058      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d44:	2b40      	cmp	r3, #64	@ 0x40
 8002d46:	d86f      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b30      	cmp	r3, #48	@ 0x30
 8002d4a:	d064      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d4c:	2b30      	cmp	r3, #48	@ 0x30
 8002d4e:	d86b      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d060      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d867      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d05c      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d05a      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d60:	e062      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d72:	f000 fb1f 	bl	80033b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	609a      	str	r2, [r3, #8]
      break;
 8002d8e:	e04f      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002da0:	f000 fb08 	bl	80033b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002db2:	609a      	str	r2, [r3, #8]
      break;
 8002db4:	e03c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f000 fa7c 	bl	80032c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2150      	movs	r1, #80	@ 0x50
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fad5 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e02c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002de2:	461a      	mov	r2, r3
 8002de4:	f000 fa9b 	bl	800331e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2160      	movs	r1, #96	@ 0x60
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fac5 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8002df4:	e01c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e02:	461a      	mov	r2, r3
 8002e04:	f000 fa5c 	bl	80032c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2140      	movs	r1, #64	@ 0x40
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fab5 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8002e14:	e00c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4610      	mov	r0, r2
 8002e22:	f000 faac 	bl	800337e <TIM_ITRx_SetConfig>
      break;
 8002e26:	e003      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e000      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a37      	ldr	r2, [pc, #220]	@ (8002f8c <TIM_Base_SetConfig+0xf0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00f      	beq.n	8002ed4 <TIM_Base_SetConfig+0x38>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eba:	d00b      	beq.n	8002ed4 <TIM_Base_SetConfig+0x38>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a34      	ldr	r2, [pc, #208]	@ (8002f90 <TIM_Base_SetConfig+0xf4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d007      	beq.n	8002ed4 <TIM_Base_SetConfig+0x38>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a33      	ldr	r2, [pc, #204]	@ (8002f94 <TIM_Base_SetConfig+0xf8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <TIM_Base_SetConfig+0x38>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a32      	ldr	r2, [pc, #200]	@ (8002f98 <TIM_Base_SetConfig+0xfc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d108      	bne.n	8002ee6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <TIM_Base_SetConfig+0xf0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01b      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef4:	d017      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a25      	ldr	r2, [pc, #148]	@ (8002f90 <TIM_Base_SetConfig+0xf4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a24      	ldr	r2, [pc, #144]	@ (8002f94 <TIM_Base_SetConfig+0xf8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00f      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a23      	ldr	r2, [pc, #140]	@ (8002f98 <TIM_Base_SetConfig+0xfc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a22      	ldr	r2, [pc, #136]	@ (8002f9c <TIM_Base_SetConfig+0x100>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <TIM_Base_SetConfig+0x104>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a20      	ldr	r2, [pc, #128]	@ (8002fa4 <TIM_Base_SetConfig+0x108>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a0c      	ldr	r2, [pc, #48]	@ (8002f8c <TIM_Base_SetConfig+0xf0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d103      	bne.n	8002f66 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f043 0204 	orr.w	r2, r3, #4
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400
 8002fa4:	40014800 	.word	0x40014800

08002fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 0201 	bic.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f023 0302 	bic.w	r3, r3, #2
 8002ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8003070 <TIM_OC1_SetConfig+0xc8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10c      	bne.n	800301e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0308 	bic.w	r3, r3, #8
 800300a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a13      	ldr	r2, [pc, #76]	@ (8003070 <TIM_OC1_SetConfig+0xc8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d111      	bne.n	800304a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800302c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	621a      	str	r2, [r3, #32]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40010000 	.word	0x40010000

08003074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f023 0210 	bic.w	r2, r3, #16
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0320 	bic.w	r3, r3, #32
 80030be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003148 <TIM_OC2_SetConfig+0xd4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d10d      	bne.n	80030f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a15      	ldr	r2, [pc, #84]	@ (8003148 <TIM_OC2_SetConfig+0xd4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d113      	bne.n	8003120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000

0800314c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1d      	ldr	r2, [pc, #116]	@ (800321c <TIM_OC3_SetConfig+0xd0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10d      	bne.n	80031c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a14      	ldr	r2, [pc, #80]	@ (800321c <TIM_OC3_SetConfig+0xd0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d113      	bne.n	80031f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40010000 	.word	0x40010000

08003220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800324e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800326a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	031b      	lsls	r3, r3, #12
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a10      	ldr	r2, [pc, #64]	@ (80032bc <TIM_OC4_SetConfig+0x9c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d109      	bne.n	8003294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	019b      	lsls	r3, r3, #6
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000

080032c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f023 0201 	bic.w	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 030a 	bic.w	r3, r3, #10
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b087      	sub	sp, #28
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f023 0210 	bic.w	r2, r3, #16
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	031b      	lsls	r3, r3, #12
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800335a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	f043 0307 	orr.w	r3, r3, #7
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	021a      	lsls	r2, r3, #8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003408:	2302      	movs	r3, #2
 800340a:	e050      	b.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d018      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003458:	d013      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a18      	ldr	r2, [pc, #96]	@ (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a16      	ldr	r2, [pc, #88]	@ (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a15      	ldr	r2, [pc, #84]	@ (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a13      	ldr	r2, [pc, #76]	@ (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40014000 	.word	0x40014000

080034d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e042      	b.n	8003590 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd ff38 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	@ 0x24
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800353a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fdd3 	bl	80040e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	@ 0x28
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d175      	bne.n	80036a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Transmit+0x2c>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e06e      	b.n	80036a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2221      	movs	r2, #33	@ 0x21
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d6:	f7fe f90f 	bl	80017f8 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f0:	d108      	bne.n	8003604 <HAL_UART_Transmit+0x6c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d104      	bne.n	8003604 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e003      	b.n	800360c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800360c:	e02e      	b.n	800366c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	2180      	movs	r1, #128	@ 0x80
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fb37 	bl	8003c8c <UART_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e03a      	b.n	80036a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	3302      	adds	r3, #2
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	e007      	b.n	800365e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1cb      	bne.n	800360e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	2140      	movs	r1, #64	@ 0x40
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fb03 	bl	8003c8c <UART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e006      	b.n	80036a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	4613      	mov	r3, r2
 80036ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d112      	bne.n	80036ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_UART_Receive_IT+0x26>
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e00b      	b.n	80036f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	461a      	mov	r2, r3
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fb2a 	bl	8003d3e <UART_Start_Receive_IT>
 80036ea:	4603      	mov	r3, r0
 80036ec:	e000      	b.n	80036f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
  }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b0ba      	sub	sp, #232	@ 0xe8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_UART_IRQHandler+0x66>
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fc07 	bl	8003f6a <UART_Receive_IT>
      return;
 800375c:	e273      	b.n	8003c46 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800375e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80de 	beq.w	8003924 <HAL_UART_IRQHandler+0x22c>
 8003768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003778:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80d1 	beq.w	8003924 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_UART_IRQHandler+0xae>
 800378e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_UART_IRQHandler+0xd2>
 80037b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	f043 0202 	orr.w	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_UART_IRQHandler+0xf6>
 80037d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	f043 0204 	orr.w	r2, r3, #4
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d011      	beq.n	800381e <HAL_UART_IRQHandler+0x126>
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d105      	bne.n	8003812 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	f043 0208 	orr.w	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 820a 	beq.w	8003c3c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_UART_IRQHandler+0x14e>
 8003834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fb92 	bl	8003f6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_UART_IRQHandler+0x17a>
 800386a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d04f      	beq.n	8003912 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa9d 	bl	8003db2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003882:	2b40      	cmp	r3, #64	@ 0x40
 8003884:	d141      	bne.n	800390a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3314      	adds	r3, #20
 800388c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800389c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1d9      	bne.n	8003886 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d013      	beq.n	8003902 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038de:	4a8a      	ldr	r2, [pc, #552]	@ (8003b08 <HAL_UART_IRQHandler+0x410>)
 80038e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe f937 	bl	8001b5a <HAL_DMA_Abort_IT>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038fc:	4610      	mov	r0, r2
 80038fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	e00e      	b.n	8003920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f9ac 	bl	8003c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	e00a      	b.n	8003920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f9a8 	bl	8003c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	e006      	b.n	8003920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9a4 	bl	8003c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800391e:	e18d      	b.n	8003c3c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	bf00      	nop
    return;
 8003922:	e18b      	b.n	8003c3c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	2b01      	cmp	r3, #1
 800392a:	f040 8167 	bne.w	8003bfc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8160 	beq.w	8003bfc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8159 	beq.w	8003bfc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	2b40      	cmp	r3, #64	@ 0x40
 800396c:	f040 80ce 	bne.w	8003b0c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800397c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a9 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800398a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800398e:	429a      	cmp	r2, r3
 8003990:	f080 80a2 	bcs.w	8003ad8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800399a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a6:	f000 8088 	beq.w	8003aba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1d9      	bne.n	80039aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e1      	bne.n	80039f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3314      	adds	r3, #20
 8003a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e3      	bne.n	8003a32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a8a:	f023 0310 	bic.w	r3, r3, #16
 8003a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	330c      	adds	r3, #12
 8003a98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e3      	bne.n	8003a78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd ffe0 	bl	8001a7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f8cf 	bl	8003c74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ad6:	e0b3      	b.n	8003c40 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	f040 80ad 	bne.w	8003c40 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af0:	f040 80a6 	bne.w	8003c40 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f8b7 	bl	8003c74 <HAL_UARTEx_RxEventCallback>
      return;
 8003b06:	e09b      	b.n	8003c40 <HAL_UART_IRQHandler+0x548>
 8003b08:	08003e79 	.word	0x08003e79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 808e 	beq.w	8003c44 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8089 	beq.w	8003c44 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b56:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e3      	bne.n	8003b32 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3314      	adds	r3, #20
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	623b      	str	r3, [r7, #32]
   return(result);
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e3      	bne.n	8003b6a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0310 	bic.w	r3, r3, #16
 8003bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bd4:	61fa      	str	r2, [r7, #28]
 8003bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	617b      	str	r3, [r7, #20]
   return(result);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e3      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f83d 	bl	8003c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bfa:	e023      	b.n	8003c44 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <HAL_UART_IRQHandler+0x524>
 8003c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f940 	bl	8003e9a <UART_Transmit_IT>
    return;
 8003c1a:	e014      	b.n	8003c46 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <HAL_UART_IRQHandler+0x54e>
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f980 	bl	8003f3a <UART_EndTransmit_IT>
    return;
 8003c3a:	e004      	b.n	8003c46 <HAL_UART_IRQHandler+0x54e>
    return;
 8003c3c:	bf00      	nop
 8003c3e:	e002      	b.n	8003c46 <HAL_UART_IRQHandler+0x54e>
      return;
 8003c40:	bf00      	nop
 8003c42:	e000      	b.n	8003c46 <HAL_UART_IRQHandler+0x54e>
      return;
 8003c44:	bf00      	nop
  }
}
 8003c46:	37e8      	adds	r7, #232	@ 0xe8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9c:	e03b      	b.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d037      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fd fda7 	bl	80017f8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e03a      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d023      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b80      	cmp	r3, #128	@ 0x80
 8003cd2:	d020      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b40      	cmp	r3, #64	@ 0x40
 8003cd8:	d01d      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d116      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f857 	bl	8003db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2208      	movs	r2, #8
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00f      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d0b4      	beq.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2222      	movs	r2, #34	@ 0x22
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0220 	orr.w	r2, r2, #32
 8003da2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b095      	sub	sp, #84	@ 0x54
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dda:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003de0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e5      	bne.n	8003dba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3314      	adds	r3, #20
 8003df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d119      	bne.n	8003e5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f023 0310 	bic.w	r3, r3, #16
 8003e40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e4a:	61ba      	str	r2, [r7, #24]
 8003e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6979      	ldr	r1, [r7, #20]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	613b      	str	r3, [r7, #16]
   return(result);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e6c:	bf00      	nop
 8003e6e:	3754      	adds	r7, #84	@ 0x54
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff fee7 	bl	8003c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b21      	cmp	r3, #33	@ 0x21
 8003eac:	d13e      	bne.n	8003f2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	d114      	bne.n	8003ee2 <UART_Transmit_IT+0x48>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d110      	bne.n	8003ee2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	621a      	str	r2, [r3, #32]
 8003ee0:	e008      	b.n	8003ef4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	1c59      	adds	r1, r3, #1
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6211      	str	r1, [r2, #32]
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4619      	mov	r1, r3
 8003f02:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10f      	bne.n	8003f28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fe76 	bl	8003c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b08c      	sub	sp, #48	@ 0x30
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b22      	cmp	r3, #34	@ 0x22
 8003f84:	f040 80aa 	bne.w	80040dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f90:	d115      	bne.n	8003fbe <UART_Receive_IT+0x54>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d111      	bne.n	8003fbe <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fbc:	e024      	b.n	8004008 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fcc:	d007      	beq.n	8003fde <UART_Receive_IT+0x74>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <UART_Receive_IT+0x82>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e008      	b.n	8003ffe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29b      	uxth	r3, r3
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4619      	mov	r1, r3
 8004016:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004018:	2b00      	cmp	r3, #0
 800401a:	d15d      	bne.n	80040d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0220 	bic.w	r2, r2, #32
 800402a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800403a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	2b01      	cmp	r3, #1
 8004060:	d135      	bne.n	80040ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	613b      	str	r3, [r7, #16]
   return(result);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f023 0310 	bic.w	r3, r3, #16
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004088:	623a      	str	r2, [r7, #32]
 800408a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	69f9      	ldr	r1, [r7, #28]
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	61bb      	str	r3, [r7, #24]
   return(result);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d10a      	bne.n	80040c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fdd4 	bl	8003c74 <HAL_UARTEx_RxEventCallback>
 80040cc:	e002      	b.n	80040d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc fc38 	bl	8000944 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e002      	b.n	80040de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3730      	adds	r7, #48	@ 0x30
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b0c0      	sub	sp, #256	@ 0x100
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	68d9      	ldr	r1, [r3, #12]
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	ea40 0301 	orr.w	r3, r0, r1
 8004110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	431a      	orrs	r2, r3
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	431a      	orrs	r2, r3
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004140:	f021 010c 	bic.w	r1, r1, #12
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800414e:	430b      	orrs	r3, r1
 8004150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004162:	6999      	ldr	r1, [r3, #24]
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	ea40 0301 	orr.w	r3, r0, r1
 800416e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b8f      	ldr	r3, [pc, #572]	@ (80043b4 <UART_SetConfig+0x2cc>)
 8004178:	429a      	cmp	r2, r3
 800417a:	d005      	beq.n	8004188 <UART_SetConfig+0xa0>
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b8d      	ldr	r3, [pc, #564]	@ (80043b8 <UART_SetConfig+0x2d0>)
 8004184:	429a      	cmp	r2, r3
 8004186:	d104      	bne.n	8004192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7fe fb2c 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 800418c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004190:	e003      	b.n	800419a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004192:	f7fe fb13 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8004196:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a4:	f040 810c 	bne.w	80043c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	1891      	adds	r1, r2, r2
 80041c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041c2:	415b      	adcs	r3, r3
 80041c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041ca:	4621      	mov	r1, r4
 80041cc:	eb12 0801 	adds.w	r8, r2, r1
 80041d0:	4629      	mov	r1, r5
 80041d2:	eb43 0901 	adc.w	r9, r3, r1
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ea:	4690      	mov	r8, r2
 80041ec:	4699      	mov	r9, r3
 80041ee:	4623      	mov	r3, r4
 80041f0:	eb18 0303 	adds.w	r3, r8, r3
 80041f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041f8:	462b      	mov	r3, r5
 80041fa:	eb49 0303 	adc.w	r3, r9, r3
 80041fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800420e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004216:	460b      	mov	r3, r1
 8004218:	18db      	adds	r3, r3, r3
 800421a:	653b      	str	r3, [r7, #80]	@ 0x50
 800421c:	4613      	mov	r3, r2
 800421e:	eb42 0303 	adc.w	r3, r2, r3
 8004222:	657b      	str	r3, [r7, #84]	@ 0x54
 8004224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800422c:	f7fc f840 	bl	80002b0 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4b61      	ldr	r3, [pc, #388]	@ (80043bc <UART_SetConfig+0x2d4>)
 8004236:	fba3 2302 	umull	r2, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	011c      	lsls	r4, r3, #4
 800423e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004248:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800424c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004258:	415b      	adcs	r3, r3
 800425a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800425c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004260:	4641      	mov	r1, r8
 8004262:	eb12 0a01 	adds.w	sl, r2, r1
 8004266:	4649      	mov	r1, r9
 8004268:	eb43 0b01 	adc.w	fp, r3, r1
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800427c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004280:	4692      	mov	sl, r2
 8004282:	469b      	mov	fp, r3
 8004284:	4643      	mov	r3, r8
 8004286:	eb1a 0303 	adds.w	r3, sl, r3
 800428a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800428e:	464b      	mov	r3, r9
 8004290:	eb4b 0303 	adc.w	r3, fp, r3
 8004294:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042ac:	460b      	mov	r3, r1
 80042ae:	18db      	adds	r3, r3, r3
 80042b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042b2:	4613      	mov	r3, r2
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042c2:	f7fb fff5 	bl	80002b0 <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	4b3b      	ldr	r3, [pc, #236]	@ (80043bc <UART_SetConfig+0x2d4>)
 80042ce:	fba3 2301 	umull	r2, r3, r3, r1
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2264      	movs	r2, #100	@ 0x64
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	1acb      	subs	r3, r1, r3
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042e2:	4b36      	ldr	r3, [pc, #216]	@ (80043bc <UART_SetConfig+0x2d4>)
 80042e4:	fba3 2302 	umull	r2, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042f0:	441c      	add	r4, r3
 80042f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004304:	4642      	mov	r2, r8
 8004306:	464b      	mov	r3, r9
 8004308:	1891      	adds	r1, r2, r2
 800430a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800430c:	415b      	adcs	r3, r3
 800430e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004314:	4641      	mov	r1, r8
 8004316:	1851      	adds	r1, r2, r1
 8004318:	6339      	str	r1, [r7, #48]	@ 0x30
 800431a:	4649      	mov	r1, r9
 800431c:	414b      	adcs	r3, r1
 800431e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800432c:	4659      	mov	r1, fp
 800432e:	00cb      	lsls	r3, r1, #3
 8004330:	4651      	mov	r1, sl
 8004332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004336:	4651      	mov	r1, sl
 8004338:	00ca      	lsls	r2, r1, #3
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	4603      	mov	r3, r0
 8004340:	4642      	mov	r2, r8
 8004342:	189b      	adds	r3, r3, r2
 8004344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004348:	464b      	mov	r3, r9
 800434a:	460a      	mov	r2, r1
 800434c:	eb42 0303 	adc.w	r3, r2, r3
 8004350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004360:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004368:	460b      	mov	r3, r1
 800436a:	18db      	adds	r3, r3, r3
 800436c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800436e:	4613      	mov	r3, r2
 8004370:	eb42 0303 	adc.w	r3, r2, r3
 8004374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800437a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800437e:	f7fb ff97 	bl	80002b0 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <UART_SetConfig+0x2d4>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2164      	movs	r1, #100	@ 0x64
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	3332      	adds	r3, #50	@ 0x32
 800439a:	4a08      	ldr	r2, [pc, #32]	@ (80043bc <UART_SetConfig+0x2d4>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 0207 	and.w	r2, r3, #7
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4422      	add	r2, r4
 80043ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043b0:	e106      	b.n	80045c0 <UART_SetConfig+0x4d8>
 80043b2:	bf00      	nop
 80043b4:	40011000 	.word	0x40011000
 80043b8:	40011400 	.word	0x40011400
 80043bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043d2:	4642      	mov	r2, r8
 80043d4:	464b      	mov	r3, r9
 80043d6:	1891      	adds	r1, r2, r2
 80043d8:	6239      	str	r1, [r7, #32]
 80043da:	415b      	adcs	r3, r3
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043e2:	4641      	mov	r1, r8
 80043e4:	1854      	adds	r4, r2, r1
 80043e6:	4649      	mov	r1, r9
 80043e8:	eb43 0501 	adc.w	r5, r3, r1
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	00eb      	lsls	r3, r5, #3
 80043f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fa:	00e2      	lsls	r2, r4, #3
 80043fc:	4614      	mov	r4, r2
 80043fe:	461d      	mov	r5, r3
 8004400:	4643      	mov	r3, r8
 8004402:	18e3      	adds	r3, r4, r3
 8004404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004408:	464b      	mov	r3, r9
 800440a:	eb45 0303 	adc.w	r3, r5, r3
 800440e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800441e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800442e:	4629      	mov	r1, r5
 8004430:	008b      	lsls	r3, r1, #2
 8004432:	4621      	mov	r1, r4
 8004434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004438:	4621      	mov	r1, r4
 800443a:	008a      	lsls	r2, r1, #2
 800443c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004440:	f7fb ff36 	bl	80002b0 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b60      	ldr	r3, [pc, #384]	@ (80045cc <UART_SetConfig+0x4e4>)
 800444a:	fba3 2302 	umull	r2, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	011c      	lsls	r4, r3, #4
 8004452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800445c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	61b9      	str	r1, [r7, #24]
 800446c:	415b      	adcs	r3, r3
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004474:	4641      	mov	r1, r8
 8004476:	1851      	adds	r1, r2, r1
 8004478:	6139      	str	r1, [r7, #16]
 800447a:	4649      	mov	r1, r9
 800447c:	414b      	adcs	r3, r1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800448c:	4659      	mov	r1, fp
 800448e:	00cb      	lsls	r3, r1, #3
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004496:	4651      	mov	r1, sl
 8004498:	00ca      	lsls	r2, r1, #3
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	4642      	mov	r2, r8
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044a8:	464b      	mov	r3, r9
 80044aa:	460a      	mov	r2, r1
 80044ac:	eb42 0303 	adc.w	r3, r2, r3
 80044b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044cc:	4649      	mov	r1, r9
 80044ce:	008b      	lsls	r3, r1, #2
 80044d0:	4641      	mov	r1, r8
 80044d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d6:	4641      	mov	r1, r8
 80044d8:	008a      	lsls	r2, r1, #2
 80044da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044de:	f7fb fee7 	bl	80002b0 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	4b38      	ldr	r3, [pc, #224]	@ (80045cc <UART_SetConfig+0x4e4>)
 80044ea:	fba3 2301 	umull	r2, r3, r3, r1
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2264      	movs	r2, #100	@ 0x64
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	1acb      	subs	r3, r1, r3
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	3332      	adds	r3, #50	@ 0x32
 80044fc:	4a33      	ldr	r2, [pc, #204]	@ (80045cc <UART_SetConfig+0x4e4>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004508:	441c      	add	r4, r3
 800450a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450e:	2200      	movs	r2, #0
 8004510:	673b      	str	r3, [r7, #112]	@ 0x70
 8004512:	677a      	str	r2, [r7, #116]	@ 0x74
 8004514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	1891      	adds	r1, r2, r2
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	415b      	adcs	r3, r3
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004528:	4641      	mov	r1, r8
 800452a:	1851      	adds	r1, r2, r1
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	4649      	mov	r1, r9
 8004530:	414b      	adcs	r3, r1
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004540:	4659      	mov	r1, fp
 8004542:	00cb      	lsls	r3, r1, #3
 8004544:	4651      	mov	r1, sl
 8004546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454a:	4651      	mov	r1, sl
 800454c:	00ca      	lsls	r2, r1, #3
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	4603      	mov	r3, r0
 8004554:	4642      	mov	r2, r8
 8004556:	189b      	adds	r3, r3, r2
 8004558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800455a:	464b      	mov	r3, r9
 800455c:	460a      	mov	r2, r1
 800455e:	eb42 0303 	adc.w	r3, r2, r3
 8004562:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	663b      	str	r3, [r7, #96]	@ 0x60
 800456e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800457c:	4649      	mov	r1, r9
 800457e:	008b      	lsls	r3, r1, #2
 8004580:	4641      	mov	r1, r8
 8004582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004586:	4641      	mov	r1, r8
 8004588:	008a      	lsls	r2, r1, #2
 800458a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800458e:	f7fb fe8f 	bl	80002b0 <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <UART_SetConfig+0x4e4>)
 8004598:	fba3 1302 	umull	r1, r3, r3, r2
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	2164      	movs	r1, #100	@ 0x64
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	3332      	adds	r3, #50	@ 0x32
 80045aa:	4a08      	ldr	r2, [pc, #32]	@ (80045cc <UART_SetConfig+0x4e4>)
 80045ac:	fba2 2303 	umull	r2, r3, r2, r3
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	f003 020f 	and.w	r2, r3, #15
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4422      	add	r2, r4
 80045be:	609a      	str	r2, [r3, #8]
}
 80045c0:	bf00      	nop
 80045c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045c6:	46bd      	mov	sp, r7
 80045c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045cc:	51eb851f 	.word	0x51eb851f

080045d0 <std>:
 80045d0:	2300      	movs	r3, #0
 80045d2:	b510      	push	{r4, lr}
 80045d4:	4604      	mov	r4, r0
 80045d6:	e9c0 3300 	strd	r3, r3, [r0]
 80045da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045de:	6083      	str	r3, [r0, #8]
 80045e0:	8181      	strh	r1, [r0, #12]
 80045e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80045e4:	81c2      	strh	r2, [r0, #14]
 80045e6:	6183      	str	r3, [r0, #24]
 80045e8:	4619      	mov	r1, r3
 80045ea:	2208      	movs	r2, #8
 80045ec:	305c      	adds	r0, #92	@ 0x5c
 80045ee:	f000 fa23 	bl	8004a38 <memset>
 80045f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <std+0x58>)
 80045f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80045f6:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <std+0x5c>)
 80045f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004630 <std+0x60>)
 80045fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <std+0x64>)
 8004600:	6323      	str	r3, [r4, #48]	@ 0x30
 8004602:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <std+0x68>)
 8004604:	6224      	str	r4, [r4, #32]
 8004606:	429c      	cmp	r4, r3
 8004608:	d006      	beq.n	8004618 <std+0x48>
 800460a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800460e:	4294      	cmp	r4, r2
 8004610:	d002      	beq.n	8004618 <std+0x48>
 8004612:	33d0      	adds	r3, #208	@ 0xd0
 8004614:	429c      	cmp	r4, r3
 8004616:	d105      	bne.n	8004624 <std+0x54>
 8004618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800461c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004620:	f000 bb14 	b.w	8004c4c <__retarget_lock_init_recursive>
 8004624:	bd10      	pop	{r4, pc}
 8004626:	bf00      	nop
 8004628:	08004889 	.word	0x08004889
 800462c:	080048ab 	.word	0x080048ab
 8004630:	080048e3 	.word	0x080048e3
 8004634:	08004907 	.word	0x08004907
 8004638:	20000a0c 	.word	0x20000a0c

0800463c <stdio_exit_handler>:
 800463c:	4a02      	ldr	r2, [pc, #8]	@ (8004648 <stdio_exit_handler+0xc>)
 800463e:	4903      	ldr	r1, [pc, #12]	@ (800464c <stdio_exit_handler+0x10>)
 8004640:	4803      	ldr	r0, [pc, #12]	@ (8004650 <stdio_exit_handler+0x14>)
 8004642:	f000 b869 	b.w	8004718 <_fwalk_sglue>
 8004646:	bf00      	nop
 8004648:	20000018 	.word	0x20000018
 800464c:	08005811 	.word	0x08005811
 8004650:	20000028 	.word	0x20000028

08004654 <cleanup_stdio>:
 8004654:	6841      	ldr	r1, [r0, #4]
 8004656:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <cleanup_stdio+0x34>)
 8004658:	4299      	cmp	r1, r3
 800465a:	b510      	push	{r4, lr}
 800465c:	4604      	mov	r4, r0
 800465e:	d001      	beq.n	8004664 <cleanup_stdio+0x10>
 8004660:	f001 f8d6 	bl	8005810 <_fflush_r>
 8004664:	68a1      	ldr	r1, [r4, #8]
 8004666:	4b09      	ldr	r3, [pc, #36]	@ (800468c <cleanup_stdio+0x38>)
 8004668:	4299      	cmp	r1, r3
 800466a:	d002      	beq.n	8004672 <cleanup_stdio+0x1e>
 800466c:	4620      	mov	r0, r4
 800466e:	f001 f8cf 	bl	8005810 <_fflush_r>
 8004672:	68e1      	ldr	r1, [r4, #12]
 8004674:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <cleanup_stdio+0x3c>)
 8004676:	4299      	cmp	r1, r3
 8004678:	d004      	beq.n	8004684 <cleanup_stdio+0x30>
 800467a:	4620      	mov	r0, r4
 800467c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004680:	f001 b8c6 	b.w	8005810 <_fflush_r>
 8004684:	bd10      	pop	{r4, pc}
 8004686:	bf00      	nop
 8004688:	20000a0c 	.word	0x20000a0c
 800468c:	20000a74 	.word	0x20000a74
 8004690:	20000adc 	.word	0x20000adc

08004694 <global_stdio_init.part.0>:
 8004694:	b510      	push	{r4, lr}
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <global_stdio_init.part.0+0x30>)
 8004698:	4c0b      	ldr	r4, [pc, #44]	@ (80046c8 <global_stdio_init.part.0+0x34>)
 800469a:	4a0c      	ldr	r2, [pc, #48]	@ (80046cc <global_stdio_init.part.0+0x38>)
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	4620      	mov	r0, r4
 80046a0:	2200      	movs	r2, #0
 80046a2:	2104      	movs	r1, #4
 80046a4:	f7ff ff94 	bl	80045d0 <std>
 80046a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046ac:	2201      	movs	r2, #1
 80046ae:	2109      	movs	r1, #9
 80046b0:	f7ff ff8e 	bl	80045d0 <std>
 80046b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046b8:	2202      	movs	r2, #2
 80046ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046be:	2112      	movs	r1, #18
 80046c0:	f7ff bf86 	b.w	80045d0 <std>
 80046c4:	20000b44 	.word	0x20000b44
 80046c8:	20000a0c 	.word	0x20000a0c
 80046cc:	0800463d 	.word	0x0800463d

080046d0 <__sfp_lock_acquire>:
 80046d0:	4801      	ldr	r0, [pc, #4]	@ (80046d8 <__sfp_lock_acquire+0x8>)
 80046d2:	f000 babc 	b.w	8004c4e <__retarget_lock_acquire_recursive>
 80046d6:	bf00      	nop
 80046d8:	20000b4d 	.word	0x20000b4d

080046dc <__sfp_lock_release>:
 80046dc:	4801      	ldr	r0, [pc, #4]	@ (80046e4 <__sfp_lock_release+0x8>)
 80046de:	f000 bab7 	b.w	8004c50 <__retarget_lock_release_recursive>
 80046e2:	bf00      	nop
 80046e4:	20000b4d 	.word	0x20000b4d

080046e8 <__sinit>:
 80046e8:	b510      	push	{r4, lr}
 80046ea:	4604      	mov	r4, r0
 80046ec:	f7ff fff0 	bl	80046d0 <__sfp_lock_acquire>
 80046f0:	6a23      	ldr	r3, [r4, #32]
 80046f2:	b11b      	cbz	r3, 80046fc <__sinit+0x14>
 80046f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f8:	f7ff bff0 	b.w	80046dc <__sfp_lock_release>
 80046fc:	4b04      	ldr	r3, [pc, #16]	@ (8004710 <__sinit+0x28>)
 80046fe:	6223      	str	r3, [r4, #32]
 8004700:	4b04      	ldr	r3, [pc, #16]	@ (8004714 <__sinit+0x2c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f5      	bne.n	80046f4 <__sinit+0xc>
 8004708:	f7ff ffc4 	bl	8004694 <global_stdio_init.part.0>
 800470c:	e7f2      	b.n	80046f4 <__sinit+0xc>
 800470e:	bf00      	nop
 8004710:	08004655 	.word	0x08004655
 8004714:	20000b44 	.word	0x20000b44

08004718 <_fwalk_sglue>:
 8004718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800471c:	4607      	mov	r7, r0
 800471e:	4688      	mov	r8, r1
 8004720:	4614      	mov	r4, r2
 8004722:	2600      	movs	r6, #0
 8004724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004728:	f1b9 0901 	subs.w	r9, r9, #1
 800472c:	d505      	bpl.n	800473a <_fwalk_sglue+0x22>
 800472e:	6824      	ldr	r4, [r4, #0]
 8004730:	2c00      	cmp	r4, #0
 8004732:	d1f7      	bne.n	8004724 <_fwalk_sglue+0xc>
 8004734:	4630      	mov	r0, r6
 8004736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473a:	89ab      	ldrh	r3, [r5, #12]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d907      	bls.n	8004750 <_fwalk_sglue+0x38>
 8004740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004744:	3301      	adds	r3, #1
 8004746:	d003      	beq.n	8004750 <_fwalk_sglue+0x38>
 8004748:	4629      	mov	r1, r5
 800474a:	4638      	mov	r0, r7
 800474c:	47c0      	blx	r8
 800474e:	4306      	orrs	r6, r0
 8004750:	3568      	adds	r5, #104	@ 0x68
 8004752:	e7e9      	b.n	8004728 <_fwalk_sglue+0x10>

08004754 <iprintf>:
 8004754:	b40f      	push	{r0, r1, r2, r3}
 8004756:	b507      	push	{r0, r1, r2, lr}
 8004758:	4906      	ldr	r1, [pc, #24]	@ (8004774 <iprintf+0x20>)
 800475a:	ab04      	add	r3, sp, #16
 800475c:	6808      	ldr	r0, [r1, #0]
 800475e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004762:	6881      	ldr	r1, [r0, #8]
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	f000 fd2b 	bl	80051c0 <_vfiprintf_r>
 800476a:	b003      	add	sp, #12
 800476c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004770:	b004      	add	sp, #16
 8004772:	4770      	bx	lr
 8004774:	20000024 	.word	0x20000024

08004778 <putchar>:
 8004778:	4b02      	ldr	r3, [pc, #8]	@ (8004784 <putchar+0xc>)
 800477a:	4601      	mov	r1, r0
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	6882      	ldr	r2, [r0, #8]
 8004780:	f001 b8e2 	b.w	8005948 <_putc_r>
 8004784:	20000024 	.word	0x20000024

08004788 <_puts_r>:
 8004788:	6a03      	ldr	r3, [r0, #32]
 800478a:	b570      	push	{r4, r5, r6, lr}
 800478c:	6884      	ldr	r4, [r0, #8]
 800478e:	4605      	mov	r5, r0
 8004790:	460e      	mov	r6, r1
 8004792:	b90b      	cbnz	r3, 8004798 <_puts_r+0x10>
 8004794:	f7ff ffa8 	bl	80046e8 <__sinit>
 8004798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800479a:	07db      	lsls	r3, r3, #31
 800479c:	d405      	bmi.n	80047aa <_puts_r+0x22>
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	0598      	lsls	r0, r3, #22
 80047a2:	d402      	bmi.n	80047aa <_puts_r+0x22>
 80047a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047a6:	f000 fa52 	bl	8004c4e <__retarget_lock_acquire_recursive>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	0719      	lsls	r1, r3, #28
 80047ae:	d502      	bpl.n	80047b6 <_puts_r+0x2e>
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d135      	bne.n	8004822 <_puts_r+0x9a>
 80047b6:	4621      	mov	r1, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 f8e7 	bl	800498c <__swsetup_r>
 80047be:	b380      	cbz	r0, 8004822 <_puts_r+0x9a>
 80047c0:	f04f 35ff 	mov.w	r5, #4294967295
 80047c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047c6:	07da      	lsls	r2, r3, #31
 80047c8:	d405      	bmi.n	80047d6 <_puts_r+0x4e>
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	059b      	lsls	r3, r3, #22
 80047ce:	d402      	bmi.n	80047d6 <_puts_r+0x4e>
 80047d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047d2:	f000 fa3d 	bl	8004c50 <__retarget_lock_release_recursive>
 80047d6:	4628      	mov	r0, r5
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da04      	bge.n	80047e8 <_puts_r+0x60>
 80047de:	69a2      	ldr	r2, [r4, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	dc17      	bgt.n	8004814 <_puts_r+0x8c>
 80047e4:	290a      	cmp	r1, #10
 80047e6:	d015      	beq.n	8004814 <_puts_r+0x8c>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	6022      	str	r2, [r4, #0]
 80047ee:	7019      	strb	r1, [r3, #0]
 80047f0:	68a3      	ldr	r3, [r4, #8]
 80047f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047f6:	3b01      	subs	r3, #1
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	2900      	cmp	r1, #0
 80047fc:	d1ed      	bne.n	80047da <_puts_r+0x52>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da11      	bge.n	8004826 <_puts_r+0x9e>
 8004802:	4622      	mov	r2, r4
 8004804:	210a      	movs	r1, #10
 8004806:	4628      	mov	r0, r5
 8004808:	f000 f881 	bl	800490e <__swbuf_r>
 800480c:	3001      	adds	r0, #1
 800480e:	d0d7      	beq.n	80047c0 <_puts_r+0x38>
 8004810:	250a      	movs	r5, #10
 8004812:	e7d7      	b.n	80047c4 <_puts_r+0x3c>
 8004814:	4622      	mov	r2, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 f879 	bl	800490e <__swbuf_r>
 800481c:	3001      	adds	r0, #1
 800481e:	d1e7      	bne.n	80047f0 <_puts_r+0x68>
 8004820:	e7ce      	b.n	80047c0 <_puts_r+0x38>
 8004822:	3e01      	subs	r6, #1
 8004824:	e7e4      	b.n	80047f0 <_puts_r+0x68>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	6022      	str	r2, [r4, #0]
 800482c:	220a      	movs	r2, #10
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	e7ee      	b.n	8004810 <_puts_r+0x88>
	...

08004834 <puts>:
 8004834:	4b02      	ldr	r3, [pc, #8]	@ (8004840 <puts+0xc>)
 8004836:	4601      	mov	r1, r0
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	f7ff bfa5 	b.w	8004788 <_puts_r>
 800483e:	bf00      	nop
 8004840:	20000024 	.word	0x20000024

08004844 <siprintf>:
 8004844:	b40e      	push	{r1, r2, r3}
 8004846:	b510      	push	{r4, lr}
 8004848:	b09d      	sub	sp, #116	@ 0x74
 800484a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800484c:	9002      	str	r0, [sp, #8]
 800484e:	9006      	str	r0, [sp, #24]
 8004850:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004854:	480a      	ldr	r0, [pc, #40]	@ (8004880 <siprintf+0x3c>)
 8004856:	9107      	str	r1, [sp, #28]
 8004858:	9104      	str	r1, [sp, #16]
 800485a:	490a      	ldr	r1, [pc, #40]	@ (8004884 <siprintf+0x40>)
 800485c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004860:	9105      	str	r1, [sp, #20]
 8004862:	2400      	movs	r4, #0
 8004864:	a902      	add	r1, sp, #8
 8004866:	6800      	ldr	r0, [r0, #0]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800486c:	f000 fb82 	bl	8004f74 <_svfiprintf_r>
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	701c      	strb	r4, [r3, #0]
 8004874:	b01d      	add	sp, #116	@ 0x74
 8004876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800487a:	b003      	add	sp, #12
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000024 	.word	0x20000024
 8004884:	ffff0208 	.word	0xffff0208

08004888 <__sread>:
 8004888:	b510      	push	{r4, lr}
 800488a:	460c      	mov	r4, r1
 800488c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004890:	f000 f98e 	bl	8004bb0 <_read_r>
 8004894:	2800      	cmp	r0, #0
 8004896:	bfab      	itete	ge
 8004898:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800489a:	89a3      	ldrhlt	r3, [r4, #12]
 800489c:	181b      	addge	r3, r3, r0
 800489e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048a2:	bfac      	ite	ge
 80048a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048a6:	81a3      	strhlt	r3, [r4, #12]
 80048a8:	bd10      	pop	{r4, pc}

080048aa <__swrite>:
 80048aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ae:	461f      	mov	r7, r3
 80048b0:	898b      	ldrh	r3, [r1, #12]
 80048b2:	05db      	lsls	r3, r3, #23
 80048b4:	4605      	mov	r5, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	4616      	mov	r6, r2
 80048ba:	d505      	bpl.n	80048c8 <__swrite+0x1e>
 80048bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c0:	2302      	movs	r3, #2
 80048c2:	2200      	movs	r2, #0
 80048c4:	f000 f962 	bl	8004b8c <_lseek_r>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048d2:	81a3      	strh	r3, [r4, #12]
 80048d4:	4632      	mov	r2, r6
 80048d6:	463b      	mov	r3, r7
 80048d8:	4628      	mov	r0, r5
 80048da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048de:	f000 b979 	b.w	8004bd4 <_write_r>

080048e2 <__sseek>:
 80048e2:	b510      	push	{r4, lr}
 80048e4:	460c      	mov	r4, r1
 80048e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ea:	f000 f94f 	bl	8004b8c <_lseek_r>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	bf15      	itete	ne
 80048f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048fe:	81a3      	strheq	r3, [r4, #12]
 8004900:	bf18      	it	ne
 8004902:	81a3      	strhne	r3, [r4, #12]
 8004904:	bd10      	pop	{r4, pc}

08004906 <__sclose>:
 8004906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490a:	f000 b92f 	b.w	8004b6c <_close_r>

0800490e <__swbuf_r>:
 800490e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004910:	460e      	mov	r6, r1
 8004912:	4614      	mov	r4, r2
 8004914:	4605      	mov	r5, r0
 8004916:	b118      	cbz	r0, 8004920 <__swbuf_r+0x12>
 8004918:	6a03      	ldr	r3, [r0, #32]
 800491a:	b90b      	cbnz	r3, 8004920 <__swbuf_r+0x12>
 800491c:	f7ff fee4 	bl	80046e8 <__sinit>
 8004920:	69a3      	ldr	r3, [r4, #24]
 8004922:	60a3      	str	r3, [r4, #8]
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	071a      	lsls	r2, r3, #28
 8004928:	d501      	bpl.n	800492e <__swbuf_r+0x20>
 800492a:	6923      	ldr	r3, [r4, #16]
 800492c:	b943      	cbnz	r3, 8004940 <__swbuf_r+0x32>
 800492e:	4621      	mov	r1, r4
 8004930:	4628      	mov	r0, r5
 8004932:	f000 f82b 	bl	800498c <__swsetup_r>
 8004936:	b118      	cbz	r0, 8004940 <__swbuf_r+0x32>
 8004938:	f04f 37ff 	mov.w	r7, #4294967295
 800493c:	4638      	mov	r0, r7
 800493e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	6922      	ldr	r2, [r4, #16]
 8004944:	1a98      	subs	r0, r3, r2
 8004946:	6963      	ldr	r3, [r4, #20]
 8004948:	b2f6      	uxtb	r6, r6
 800494a:	4283      	cmp	r3, r0
 800494c:	4637      	mov	r7, r6
 800494e:	dc05      	bgt.n	800495c <__swbuf_r+0x4e>
 8004950:	4621      	mov	r1, r4
 8004952:	4628      	mov	r0, r5
 8004954:	f000 ff5c 	bl	8005810 <_fflush_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	d1ed      	bne.n	8004938 <__swbuf_r+0x2a>
 800495c:	68a3      	ldr	r3, [r4, #8]
 800495e:	3b01      	subs	r3, #1
 8004960:	60a3      	str	r3, [r4, #8]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	6022      	str	r2, [r4, #0]
 8004968:	701e      	strb	r6, [r3, #0]
 800496a:	6962      	ldr	r2, [r4, #20]
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	429a      	cmp	r2, r3
 8004970:	d004      	beq.n	800497c <__swbuf_r+0x6e>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	07db      	lsls	r3, r3, #31
 8004976:	d5e1      	bpl.n	800493c <__swbuf_r+0x2e>
 8004978:	2e0a      	cmp	r6, #10
 800497a:	d1df      	bne.n	800493c <__swbuf_r+0x2e>
 800497c:	4621      	mov	r1, r4
 800497e:	4628      	mov	r0, r5
 8004980:	f000 ff46 	bl	8005810 <_fflush_r>
 8004984:	2800      	cmp	r0, #0
 8004986:	d0d9      	beq.n	800493c <__swbuf_r+0x2e>
 8004988:	e7d6      	b.n	8004938 <__swbuf_r+0x2a>
	...

0800498c <__swsetup_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4b29      	ldr	r3, [pc, #164]	@ (8004a34 <__swsetup_r+0xa8>)
 8004990:	4605      	mov	r5, r0
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	460c      	mov	r4, r1
 8004996:	b118      	cbz	r0, 80049a0 <__swsetup_r+0x14>
 8004998:	6a03      	ldr	r3, [r0, #32]
 800499a:	b90b      	cbnz	r3, 80049a0 <__swsetup_r+0x14>
 800499c:	f7ff fea4 	bl	80046e8 <__sinit>
 80049a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a4:	0719      	lsls	r1, r3, #28
 80049a6:	d422      	bmi.n	80049ee <__swsetup_r+0x62>
 80049a8:	06da      	lsls	r2, r3, #27
 80049aa:	d407      	bmi.n	80049bc <__swsetup_r+0x30>
 80049ac:	2209      	movs	r2, #9
 80049ae:	602a      	str	r2, [r5, #0]
 80049b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	e033      	b.n	8004a24 <__swsetup_r+0x98>
 80049bc:	0758      	lsls	r0, r3, #29
 80049be:	d512      	bpl.n	80049e6 <__swsetup_r+0x5a>
 80049c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049c2:	b141      	cbz	r1, 80049d6 <__swsetup_r+0x4a>
 80049c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049c8:	4299      	cmp	r1, r3
 80049ca:	d002      	beq.n	80049d2 <__swsetup_r+0x46>
 80049cc:	4628      	mov	r0, r5
 80049ce:	f000 f975 	bl	8004cbc <_free_r>
 80049d2:	2300      	movs	r3, #0
 80049d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	2300      	movs	r3, #0
 80049e0:	6063      	str	r3, [r4, #4]
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	f043 0308 	orr.w	r3, r3, #8
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	b94b      	cbnz	r3, 8004a06 <__swsetup_r+0x7a>
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80049f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049fc:	d003      	beq.n	8004a06 <__swsetup_r+0x7a>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 ff65 	bl	80058d0 <__smakebuf_r>
 8004a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0a:	f013 0201 	ands.w	r2, r3, #1
 8004a0e:	d00a      	beq.n	8004a26 <__swsetup_r+0x9a>
 8004a10:	2200      	movs	r2, #0
 8004a12:	60a2      	str	r2, [r4, #8]
 8004a14:	6962      	ldr	r2, [r4, #20]
 8004a16:	4252      	negs	r2, r2
 8004a18:	61a2      	str	r2, [r4, #24]
 8004a1a:	6922      	ldr	r2, [r4, #16]
 8004a1c:	b942      	cbnz	r2, 8004a30 <__swsetup_r+0xa4>
 8004a1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a22:	d1c5      	bne.n	80049b0 <__swsetup_r+0x24>
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
 8004a26:	0799      	lsls	r1, r3, #30
 8004a28:	bf58      	it	pl
 8004a2a:	6962      	ldrpl	r2, [r4, #20]
 8004a2c:	60a2      	str	r2, [r4, #8]
 8004a2e:	e7f4      	b.n	8004a1a <__swsetup_r+0x8e>
 8004a30:	2000      	movs	r0, #0
 8004a32:	e7f7      	b.n	8004a24 <__swsetup_r+0x98>
 8004a34:	20000024 	.word	0x20000024

08004a38 <memset>:
 8004a38:	4402      	add	r2, r0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d100      	bne.n	8004a42 <memset+0xa>
 8004a40:	4770      	bx	lr
 8004a42:	f803 1b01 	strb.w	r1, [r3], #1
 8004a46:	e7f9      	b.n	8004a3c <memset+0x4>

08004a48 <strchr>:
 8004a48:	b2c9      	uxtb	r1, r1
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a52:	b112      	cbz	r2, 8004a5a <strchr+0x12>
 8004a54:	428a      	cmp	r2, r1
 8004a56:	d1f9      	bne.n	8004a4c <strchr+0x4>
 8004a58:	4770      	bx	lr
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	bf18      	it	ne
 8004a5e:	2000      	movne	r0, #0
 8004a60:	4770      	bx	lr

08004a62 <strncmp>:
 8004a62:	b510      	push	{r4, lr}
 8004a64:	b16a      	cbz	r2, 8004a82 <strncmp+0x20>
 8004a66:	3901      	subs	r1, #1
 8004a68:	1884      	adds	r4, r0, r2
 8004a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d103      	bne.n	8004a7e <strncmp+0x1c>
 8004a76:	42a0      	cmp	r0, r4
 8004a78:	d001      	beq.n	8004a7e <strncmp+0x1c>
 8004a7a:	2a00      	cmp	r2, #0
 8004a7c:	d1f5      	bne.n	8004a6a <strncmp+0x8>
 8004a7e:	1ad0      	subs	r0, r2, r3
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	4610      	mov	r0, r2
 8004a84:	e7fc      	b.n	8004a80 <strncmp+0x1e>
	...

08004a88 <strtok>:
 8004a88:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <strtok+0x5c>)
 8004a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	681f      	ldr	r7, [r3, #0]
 8004a90:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004a92:	4605      	mov	r5, r0
 8004a94:	460e      	mov	r6, r1
 8004a96:	b9ec      	cbnz	r4, 8004ad4 <strtok+0x4c>
 8004a98:	2050      	movs	r0, #80	@ 0x50
 8004a9a:	f000 f959 	bl	8004d50 <malloc>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6478      	str	r0, [r7, #68]	@ 0x44
 8004aa2:	b920      	cbnz	r0, 8004aae <strtok+0x26>
 8004aa4:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <strtok+0x60>)
 8004aa6:	4811      	ldr	r0, [pc, #68]	@ (8004aec <strtok+0x64>)
 8004aa8:	215b      	movs	r1, #91	@ 0x5b
 8004aaa:	f000 f8e9 	bl	8004c80 <__assert_func>
 8004aae:	e9c0 4400 	strd	r4, r4, [r0]
 8004ab2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004ab6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004aba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004abe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004ac2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004ac6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004aca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004ace:	6184      	str	r4, [r0, #24]
 8004ad0:	7704      	strb	r4, [r0, #28]
 8004ad2:	6244      	str	r4, [r0, #36]	@ 0x24
 8004ad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	2301      	movs	r3, #1
 8004adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae0:	f000 b806 	b.w	8004af0 <__strtok_r>
 8004ae4:	20000024 	.word	0x20000024
 8004ae8:	08005f34 	.word	0x08005f34
 8004aec:	08005f4b 	.word	0x08005f4b

08004af0 <__strtok_r>:
 8004af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af2:	4604      	mov	r4, r0
 8004af4:	b908      	cbnz	r0, 8004afa <__strtok_r+0xa>
 8004af6:	6814      	ldr	r4, [r2, #0]
 8004af8:	b144      	cbz	r4, 8004b0c <__strtok_r+0x1c>
 8004afa:	4620      	mov	r0, r4
 8004afc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b00:	460f      	mov	r7, r1
 8004b02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b06:	b91e      	cbnz	r6, 8004b10 <__strtok_r+0x20>
 8004b08:	b965      	cbnz	r5, 8004b24 <__strtok_r+0x34>
 8004b0a:	6015      	str	r5, [r2, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e005      	b.n	8004b1c <__strtok_r+0x2c>
 8004b10:	42b5      	cmp	r5, r6
 8004b12:	d1f6      	bne.n	8004b02 <__strtok_r+0x12>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f0      	bne.n	8004afa <__strtok_r+0xa>
 8004b18:	6014      	str	r4, [r2, #0]
 8004b1a:	7003      	strb	r3, [r0, #0]
 8004b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b1e:	461c      	mov	r4, r3
 8004b20:	e00c      	b.n	8004b3c <__strtok_r+0x4c>
 8004b22:	b91d      	cbnz	r5, 8004b2c <__strtok_r+0x3c>
 8004b24:	4627      	mov	r7, r4
 8004b26:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b2a:	460e      	mov	r6, r1
 8004b2c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004b30:	42ab      	cmp	r3, r5
 8004b32:	d1f6      	bne.n	8004b22 <__strtok_r+0x32>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f2      	beq.n	8004b1e <__strtok_r+0x2e>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	703b      	strb	r3, [r7, #0]
 8004b3c:	6014      	str	r4, [r2, #0]
 8004b3e:	e7ed      	b.n	8004b1c <__strtok_r+0x2c>

08004b40 <strstr>:
 8004b40:	780a      	ldrb	r2, [r1, #0]
 8004b42:	b570      	push	{r4, r5, r6, lr}
 8004b44:	b96a      	cbnz	r2, 8004b62 <strstr+0x22>
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d109      	bne.n	8004b60 <strstr+0x20>
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	4605      	mov	r5, r0
 8004b50:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f6      	beq.n	8004b46 <strstr+0x6>
 8004b58:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004b5c:	429e      	cmp	r6, r3
 8004b5e:	d0f7      	beq.n	8004b50 <strstr+0x10>
 8004b60:	3001      	adds	r0, #1
 8004b62:	7803      	ldrb	r3, [r0, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ef      	bne.n	8004b48 <strstr+0x8>
 8004b68:	4618      	mov	r0, r3
 8004b6a:	e7ec      	b.n	8004b46 <strstr+0x6>

08004b6c <_close_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d06      	ldr	r5, [pc, #24]	@ (8004b88 <_close_r+0x1c>)
 8004b70:	2300      	movs	r3, #0
 8004b72:	4604      	mov	r4, r0
 8004b74:	4608      	mov	r0, r1
 8004b76:	602b      	str	r3, [r5, #0]
 8004b78:	f7fc fd32 	bl	80015e0 <_close>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_close_r+0x1a>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_close_r+0x1a>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	20000b48 	.word	0x20000b48

08004b8c <_lseek_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	4d07      	ldr	r5, [pc, #28]	@ (8004bac <_lseek_r+0x20>)
 8004b90:	4604      	mov	r4, r0
 8004b92:	4608      	mov	r0, r1
 8004b94:	4611      	mov	r1, r2
 8004b96:	2200      	movs	r2, #0
 8004b98:	602a      	str	r2, [r5, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f7fc fd47 	bl	800162e <_lseek>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_lseek_r+0x1e>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_lseek_r+0x1e>
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	20000b48 	.word	0x20000b48

08004bb0 <_read_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4d07      	ldr	r5, [pc, #28]	@ (8004bd0 <_read_r+0x20>)
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	602a      	str	r2, [r5, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fc fcd5 	bl	800156e <_read>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_read_r+0x1e>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_read_r+0x1e>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000b48 	.word	0x20000b48

08004bd4 <_write_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d07      	ldr	r5, [pc, #28]	@ (8004bf4 <_write_r+0x20>)
 8004bd8:	4604      	mov	r4, r0
 8004bda:	4608      	mov	r0, r1
 8004bdc:	4611      	mov	r1, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	602a      	str	r2, [r5, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f7fc fce0 	bl	80015a8 <_write>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_write_r+0x1e>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_write_r+0x1e>
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000b48 	.word	0x20000b48

08004bf8 <__errno>:
 8004bf8:	4b01      	ldr	r3, [pc, #4]	@ (8004c00 <__errno+0x8>)
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000024 	.word	0x20000024

08004c04 <__libc_init_array>:
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	4d0d      	ldr	r5, [pc, #52]	@ (8004c3c <__libc_init_array+0x38>)
 8004c08:	4c0d      	ldr	r4, [pc, #52]	@ (8004c40 <__libc_init_array+0x3c>)
 8004c0a:	1b64      	subs	r4, r4, r5
 8004c0c:	10a4      	asrs	r4, r4, #2
 8004c0e:	2600      	movs	r6, #0
 8004c10:	42a6      	cmp	r6, r4
 8004c12:	d109      	bne.n	8004c28 <__libc_init_array+0x24>
 8004c14:	4d0b      	ldr	r5, [pc, #44]	@ (8004c44 <__libc_init_array+0x40>)
 8004c16:	4c0c      	ldr	r4, [pc, #48]	@ (8004c48 <__libc_init_array+0x44>)
 8004c18:	f000 ff98 	bl	8005b4c <_init>
 8004c1c:	1b64      	subs	r4, r4, r5
 8004c1e:	10a4      	asrs	r4, r4, #2
 8004c20:	2600      	movs	r6, #0
 8004c22:	42a6      	cmp	r6, r4
 8004c24:	d105      	bne.n	8004c32 <__libc_init_array+0x2e>
 8004c26:	bd70      	pop	{r4, r5, r6, pc}
 8004c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2c:	4798      	blx	r3
 8004c2e:	3601      	adds	r6, #1
 8004c30:	e7ee      	b.n	8004c10 <__libc_init_array+0xc>
 8004c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c36:	4798      	blx	r3
 8004c38:	3601      	adds	r6, #1
 8004c3a:	e7f2      	b.n	8004c22 <__libc_init_array+0x1e>
 8004c3c:	0800601c 	.word	0x0800601c
 8004c40:	0800601c 	.word	0x0800601c
 8004c44:	0800601c 	.word	0x0800601c
 8004c48:	08006020 	.word	0x08006020

08004c4c <__retarget_lock_init_recursive>:
 8004c4c:	4770      	bx	lr

08004c4e <__retarget_lock_acquire_recursive>:
 8004c4e:	4770      	bx	lr

08004c50 <__retarget_lock_release_recursive>:
 8004c50:	4770      	bx	lr

08004c52 <strcpy>:
 8004c52:	4603      	mov	r3, r0
 8004c54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c58:	f803 2b01 	strb.w	r2, [r3], #1
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d1f9      	bne.n	8004c54 <strcpy+0x2>
 8004c60:	4770      	bx	lr

08004c62 <memcpy>:
 8004c62:	440a      	add	r2, r1
 8004c64:	4291      	cmp	r1, r2
 8004c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c6a:	d100      	bne.n	8004c6e <memcpy+0xc>
 8004c6c:	4770      	bx	lr
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c78:	4291      	cmp	r1, r2
 8004c7a:	d1f9      	bne.n	8004c70 <memcpy+0xe>
 8004c7c:	bd10      	pop	{r4, pc}
	...

08004c80 <__assert_func>:
 8004c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c82:	4614      	mov	r4, r2
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b09      	ldr	r3, [pc, #36]	@ (8004cac <__assert_func+0x2c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	68d8      	ldr	r0, [r3, #12]
 8004c8e:	b14c      	cbz	r4, 8004ca4 <__assert_func+0x24>
 8004c90:	4b07      	ldr	r3, [pc, #28]	@ (8004cb0 <__assert_func+0x30>)
 8004c92:	9100      	str	r1, [sp, #0]
 8004c94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c98:	4906      	ldr	r1, [pc, #24]	@ (8004cb4 <__assert_func+0x34>)
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	f000 fde0 	bl	8005860 <fiprintf>
 8004ca0:	f000 fed2 	bl	8005a48 <abort>
 8004ca4:	4b04      	ldr	r3, [pc, #16]	@ (8004cb8 <__assert_func+0x38>)
 8004ca6:	461c      	mov	r4, r3
 8004ca8:	e7f3      	b.n	8004c92 <__assert_func+0x12>
 8004caa:	bf00      	nop
 8004cac:	20000024 	.word	0x20000024
 8004cb0:	08005fa5 	.word	0x08005fa5
 8004cb4:	08005fb2 	.word	0x08005fb2
 8004cb8:	08005fe0 	.word	0x08005fe0

08004cbc <_free_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	2900      	cmp	r1, #0
 8004cc2:	d041      	beq.n	8004d48 <_free_r+0x8c>
 8004cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc8:	1f0c      	subs	r4, r1, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bfb8      	it	lt
 8004cce:	18e4      	addlt	r4, r4, r3
 8004cd0:	f000 f8e8 	bl	8004ea4 <__malloc_lock>
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d4c <_free_r+0x90>)
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	b933      	cbnz	r3, 8004ce8 <_free_r+0x2c>
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	6014      	str	r4, [r2, #0]
 8004cde:	4628      	mov	r0, r5
 8004ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ce4:	f000 b8e4 	b.w	8004eb0 <__malloc_unlock>
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	d908      	bls.n	8004cfe <_free_r+0x42>
 8004cec:	6820      	ldr	r0, [r4, #0]
 8004cee:	1821      	adds	r1, r4, r0
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	bf01      	itttt	eq
 8004cf4:	6819      	ldreq	r1, [r3, #0]
 8004cf6:	685b      	ldreq	r3, [r3, #4]
 8004cf8:	1809      	addeq	r1, r1, r0
 8004cfa:	6021      	streq	r1, [r4, #0]
 8004cfc:	e7ed      	b.n	8004cda <_free_r+0x1e>
 8004cfe:	461a      	mov	r2, r3
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	b10b      	cbz	r3, 8004d08 <_free_r+0x4c>
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	d9fa      	bls.n	8004cfe <_free_r+0x42>
 8004d08:	6811      	ldr	r1, [r2, #0]
 8004d0a:	1850      	adds	r0, r2, r1
 8004d0c:	42a0      	cmp	r0, r4
 8004d0e:	d10b      	bne.n	8004d28 <_free_r+0x6c>
 8004d10:	6820      	ldr	r0, [r4, #0]
 8004d12:	4401      	add	r1, r0
 8004d14:	1850      	adds	r0, r2, r1
 8004d16:	4283      	cmp	r3, r0
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	d1e0      	bne.n	8004cde <_free_r+0x22>
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	6053      	str	r3, [r2, #4]
 8004d22:	4408      	add	r0, r1
 8004d24:	6010      	str	r0, [r2, #0]
 8004d26:	e7da      	b.n	8004cde <_free_r+0x22>
 8004d28:	d902      	bls.n	8004d30 <_free_r+0x74>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	602b      	str	r3, [r5, #0]
 8004d2e:	e7d6      	b.n	8004cde <_free_r+0x22>
 8004d30:	6820      	ldr	r0, [r4, #0]
 8004d32:	1821      	adds	r1, r4, r0
 8004d34:	428b      	cmp	r3, r1
 8004d36:	bf04      	itt	eq
 8004d38:	6819      	ldreq	r1, [r3, #0]
 8004d3a:	685b      	ldreq	r3, [r3, #4]
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	bf04      	itt	eq
 8004d40:	1809      	addeq	r1, r1, r0
 8004d42:	6021      	streq	r1, [r4, #0]
 8004d44:	6054      	str	r4, [r2, #4]
 8004d46:	e7ca      	b.n	8004cde <_free_r+0x22>
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000b54 	.word	0x20000b54

08004d50 <malloc>:
 8004d50:	4b02      	ldr	r3, [pc, #8]	@ (8004d5c <malloc+0xc>)
 8004d52:	4601      	mov	r1, r0
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	f000 b825 	b.w	8004da4 <_malloc_r>
 8004d5a:	bf00      	nop
 8004d5c:	20000024 	.word	0x20000024

08004d60 <sbrk_aligned>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	4e0f      	ldr	r6, [pc, #60]	@ (8004da0 <sbrk_aligned+0x40>)
 8004d64:	460c      	mov	r4, r1
 8004d66:	6831      	ldr	r1, [r6, #0]
 8004d68:	4605      	mov	r5, r0
 8004d6a:	b911      	cbnz	r1, 8004d72 <sbrk_aligned+0x12>
 8004d6c:	f000 fe5c 	bl	8005a28 <_sbrk_r>
 8004d70:	6030      	str	r0, [r6, #0]
 8004d72:	4621      	mov	r1, r4
 8004d74:	4628      	mov	r0, r5
 8004d76:	f000 fe57 	bl	8005a28 <_sbrk_r>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	d103      	bne.n	8004d86 <sbrk_aligned+0x26>
 8004d7e:	f04f 34ff 	mov.w	r4, #4294967295
 8004d82:	4620      	mov	r0, r4
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	1cc4      	adds	r4, r0, #3
 8004d88:	f024 0403 	bic.w	r4, r4, #3
 8004d8c:	42a0      	cmp	r0, r4
 8004d8e:	d0f8      	beq.n	8004d82 <sbrk_aligned+0x22>
 8004d90:	1a21      	subs	r1, r4, r0
 8004d92:	4628      	mov	r0, r5
 8004d94:	f000 fe48 	bl	8005a28 <_sbrk_r>
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d1f2      	bne.n	8004d82 <sbrk_aligned+0x22>
 8004d9c:	e7ef      	b.n	8004d7e <sbrk_aligned+0x1e>
 8004d9e:	bf00      	nop
 8004da0:	20000b50 	.word	0x20000b50

08004da4 <_malloc_r>:
 8004da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da8:	1ccd      	adds	r5, r1, #3
 8004daa:	f025 0503 	bic.w	r5, r5, #3
 8004dae:	3508      	adds	r5, #8
 8004db0:	2d0c      	cmp	r5, #12
 8004db2:	bf38      	it	cc
 8004db4:	250c      	movcc	r5, #12
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	4606      	mov	r6, r0
 8004dba:	db01      	blt.n	8004dc0 <_malloc_r+0x1c>
 8004dbc:	42a9      	cmp	r1, r5
 8004dbe:	d904      	bls.n	8004dca <_malloc_r+0x26>
 8004dc0:	230c      	movs	r3, #12
 8004dc2:	6033      	str	r3, [r6, #0]
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ea0 <_malloc_r+0xfc>
 8004dce:	f000 f869 	bl	8004ea4 <__malloc_lock>
 8004dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd6:	461c      	mov	r4, r3
 8004dd8:	bb44      	cbnz	r4, 8004e2c <_malloc_r+0x88>
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f7ff ffbf 	bl	8004d60 <sbrk_aligned>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	4604      	mov	r4, r0
 8004de6:	d158      	bne.n	8004e9a <_malloc_r+0xf6>
 8004de8:	f8d8 4000 	ldr.w	r4, [r8]
 8004dec:	4627      	mov	r7, r4
 8004dee:	2f00      	cmp	r7, #0
 8004df0:	d143      	bne.n	8004e7a <_malloc_r+0xd6>
 8004df2:	2c00      	cmp	r4, #0
 8004df4:	d04b      	beq.n	8004e8e <_malloc_r+0xea>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	4639      	mov	r1, r7
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	eb04 0903 	add.w	r9, r4, r3
 8004e00:	f000 fe12 	bl	8005a28 <_sbrk_r>
 8004e04:	4581      	cmp	r9, r0
 8004e06:	d142      	bne.n	8004e8e <_malloc_r+0xea>
 8004e08:	6821      	ldr	r1, [r4, #0]
 8004e0a:	1a6d      	subs	r5, r5, r1
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f7ff ffa6 	bl	8004d60 <sbrk_aligned>
 8004e14:	3001      	adds	r0, #1
 8004e16:	d03a      	beq.n	8004e8e <_malloc_r+0xea>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	442b      	add	r3, r5
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	bb62      	cbnz	r2, 8004e80 <_malloc_r+0xdc>
 8004e26:	f8c8 7000 	str.w	r7, [r8]
 8004e2a:	e00f      	b.n	8004e4c <_malloc_r+0xa8>
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	1b52      	subs	r2, r2, r5
 8004e30:	d420      	bmi.n	8004e74 <_malloc_r+0xd0>
 8004e32:	2a0b      	cmp	r2, #11
 8004e34:	d917      	bls.n	8004e66 <_malloc_r+0xc2>
 8004e36:	1961      	adds	r1, r4, r5
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	6025      	str	r5, [r4, #0]
 8004e3c:	bf18      	it	ne
 8004e3e:	6059      	strne	r1, [r3, #4]
 8004e40:	6863      	ldr	r3, [r4, #4]
 8004e42:	bf08      	it	eq
 8004e44:	f8c8 1000 	streq.w	r1, [r8]
 8004e48:	5162      	str	r2, [r4, r5]
 8004e4a:	604b      	str	r3, [r1, #4]
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f000 f82f 	bl	8004eb0 <__malloc_unlock>
 8004e52:	f104 000b 	add.w	r0, r4, #11
 8004e56:	1d23      	adds	r3, r4, #4
 8004e58:	f020 0007 	bic.w	r0, r0, #7
 8004e5c:	1ac2      	subs	r2, r0, r3
 8004e5e:	bf1c      	itt	ne
 8004e60:	1a1b      	subne	r3, r3, r0
 8004e62:	50a3      	strne	r3, [r4, r2]
 8004e64:	e7af      	b.n	8004dc6 <_malloc_r+0x22>
 8004e66:	6862      	ldr	r2, [r4, #4]
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	bf0c      	ite	eq
 8004e6c:	f8c8 2000 	streq.w	r2, [r8]
 8004e70:	605a      	strne	r2, [r3, #4]
 8004e72:	e7eb      	b.n	8004e4c <_malloc_r+0xa8>
 8004e74:	4623      	mov	r3, r4
 8004e76:	6864      	ldr	r4, [r4, #4]
 8004e78:	e7ae      	b.n	8004dd8 <_malloc_r+0x34>
 8004e7a:	463c      	mov	r4, r7
 8004e7c:	687f      	ldr	r7, [r7, #4]
 8004e7e:	e7b6      	b.n	8004dee <_malloc_r+0x4a>
 8004e80:	461a      	mov	r2, r3
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d1fb      	bne.n	8004e80 <_malloc_r+0xdc>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6053      	str	r3, [r2, #4]
 8004e8c:	e7de      	b.n	8004e4c <_malloc_r+0xa8>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	6033      	str	r3, [r6, #0]
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 f80c 	bl	8004eb0 <__malloc_unlock>
 8004e98:	e794      	b.n	8004dc4 <_malloc_r+0x20>
 8004e9a:	6005      	str	r5, [r0, #0]
 8004e9c:	e7d6      	b.n	8004e4c <_malloc_r+0xa8>
 8004e9e:	bf00      	nop
 8004ea0:	20000b54 	.word	0x20000b54

08004ea4 <__malloc_lock>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	@ (8004eac <__malloc_lock+0x8>)
 8004ea6:	f7ff bed2 	b.w	8004c4e <__retarget_lock_acquire_recursive>
 8004eaa:	bf00      	nop
 8004eac:	20000b4c 	.word	0x20000b4c

08004eb0 <__malloc_unlock>:
 8004eb0:	4801      	ldr	r0, [pc, #4]	@ (8004eb8 <__malloc_unlock+0x8>)
 8004eb2:	f7ff becd 	b.w	8004c50 <__retarget_lock_release_recursive>
 8004eb6:	bf00      	nop
 8004eb8:	20000b4c 	.word	0x20000b4c

08004ebc <__ssputs_r>:
 8004ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	688e      	ldr	r6, [r1, #8]
 8004ec2:	461f      	mov	r7, r3
 8004ec4:	42be      	cmp	r6, r7
 8004ec6:	680b      	ldr	r3, [r1, #0]
 8004ec8:	4682      	mov	sl, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	4690      	mov	r8, r2
 8004ece:	d82d      	bhi.n	8004f2c <__ssputs_r+0x70>
 8004ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ed4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ed8:	d026      	beq.n	8004f28 <__ssputs_r+0x6c>
 8004eda:	6965      	ldr	r5, [r4, #20]
 8004edc:	6909      	ldr	r1, [r1, #16]
 8004ede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ee2:	eba3 0901 	sub.w	r9, r3, r1
 8004ee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004eea:	1c7b      	adds	r3, r7, #1
 8004eec:	444b      	add	r3, r9
 8004eee:	106d      	asrs	r5, r5, #1
 8004ef0:	429d      	cmp	r5, r3
 8004ef2:	bf38      	it	cc
 8004ef4:	461d      	movcc	r5, r3
 8004ef6:	0553      	lsls	r3, r2, #21
 8004ef8:	d527      	bpl.n	8004f4a <__ssputs_r+0x8e>
 8004efa:	4629      	mov	r1, r5
 8004efc:	f7ff ff52 	bl	8004da4 <_malloc_r>
 8004f00:	4606      	mov	r6, r0
 8004f02:	b360      	cbz	r0, 8004f5e <__ssputs_r+0xa2>
 8004f04:	6921      	ldr	r1, [r4, #16]
 8004f06:	464a      	mov	r2, r9
 8004f08:	f7ff feab 	bl	8004c62 <memcpy>
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	6126      	str	r6, [r4, #16]
 8004f1a:	6165      	str	r5, [r4, #20]
 8004f1c:	444e      	add	r6, r9
 8004f1e:	eba5 0509 	sub.w	r5, r5, r9
 8004f22:	6026      	str	r6, [r4, #0]
 8004f24:	60a5      	str	r5, [r4, #8]
 8004f26:	463e      	mov	r6, r7
 8004f28:	42be      	cmp	r6, r7
 8004f2a:	d900      	bls.n	8004f2e <__ssputs_r+0x72>
 8004f2c:	463e      	mov	r6, r7
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	4632      	mov	r2, r6
 8004f32:	4641      	mov	r1, r8
 8004f34:	f000 fd3c 	bl	80059b0 <memmove>
 8004f38:	68a3      	ldr	r3, [r4, #8]
 8004f3a:	1b9b      	subs	r3, r3, r6
 8004f3c:	60a3      	str	r3, [r4, #8]
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	4433      	add	r3, r6
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	2000      	movs	r0, #0
 8004f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4a:	462a      	mov	r2, r5
 8004f4c:	f000 fd83 	bl	8005a56 <_realloc_r>
 8004f50:	4606      	mov	r6, r0
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d1e0      	bne.n	8004f18 <__ssputs_r+0x5c>
 8004f56:	6921      	ldr	r1, [r4, #16]
 8004f58:	4650      	mov	r0, sl
 8004f5a:	f7ff feaf 	bl	8004cbc <_free_r>
 8004f5e:	230c      	movs	r3, #12
 8004f60:	f8ca 3000 	str.w	r3, [sl]
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	e7e9      	b.n	8004f46 <__ssputs_r+0x8a>
	...

08004f74 <_svfiprintf_r>:
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	4698      	mov	r8, r3
 8004f7a:	898b      	ldrh	r3, [r1, #12]
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	b09d      	sub	sp, #116	@ 0x74
 8004f80:	4607      	mov	r7, r0
 8004f82:	460d      	mov	r5, r1
 8004f84:	4614      	mov	r4, r2
 8004f86:	d510      	bpl.n	8004faa <_svfiprintf_r+0x36>
 8004f88:	690b      	ldr	r3, [r1, #16]
 8004f8a:	b973      	cbnz	r3, 8004faa <_svfiprintf_r+0x36>
 8004f8c:	2140      	movs	r1, #64	@ 0x40
 8004f8e:	f7ff ff09 	bl	8004da4 <_malloc_r>
 8004f92:	6028      	str	r0, [r5, #0]
 8004f94:	6128      	str	r0, [r5, #16]
 8004f96:	b930      	cbnz	r0, 8004fa6 <_svfiprintf_r+0x32>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	b01d      	add	sp, #116	@ 0x74
 8004fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa6:	2340      	movs	r3, #64	@ 0x40
 8004fa8:	616b      	str	r3, [r5, #20]
 8004faa:	2300      	movs	r3, #0
 8004fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fae:	2320      	movs	r3, #32
 8004fb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fb8:	2330      	movs	r3, #48	@ 0x30
 8004fba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005158 <_svfiprintf_r+0x1e4>
 8004fbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fc2:	f04f 0901 	mov.w	r9, #1
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	469a      	mov	sl, r3
 8004fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fce:	b10a      	cbz	r2, 8004fd4 <_svfiprintf_r+0x60>
 8004fd0:	2a25      	cmp	r2, #37	@ 0x25
 8004fd2:	d1f9      	bne.n	8004fc8 <_svfiprintf_r+0x54>
 8004fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd8:	d00b      	beq.n	8004ff2 <_svfiprintf_r+0x7e>
 8004fda:	465b      	mov	r3, fp
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f7ff ff6b 	bl	8004ebc <__ssputs_r>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f000 80a7 	beq.w	800513a <_svfiprintf_r+0x1c6>
 8004fec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fee:	445a      	add	r2, fp
 8004ff0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 809f 	beq.w	800513a <_svfiprintf_r+0x1c6>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8005002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005006:	f10a 0a01 	add.w	sl, sl, #1
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	9307      	str	r3, [sp, #28]
 800500e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005012:	931a      	str	r3, [sp, #104]	@ 0x68
 8005014:	4654      	mov	r4, sl
 8005016:	2205      	movs	r2, #5
 8005018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501c:	484e      	ldr	r0, [pc, #312]	@ (8005158 <_svfiprintf_r+0x1e4>)
 800501e:	f7fb f8f7 	bl	8000210 <memchr>
 8005022:	9a04      	ldr	r2, [sp, #16]
 8005024:	b9d8      	cbnz	r0, 800505e <_svfiprintf_r+0xea>
 8005026:	06d0      	lsls	r0, r2, #27
 8005028:	bf44      	itt	mi
 800502a:	2320      	movmi	r3, #32
 800502c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005030:	0711      	lsls	r1, r2, #28
 8005032:	bf44      	itt	mi
 8005034:	232b      	movmi	r3, #43	@ 0x2b
 8005036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800503a:	f89a 3000 	ldrb.w	r3, [sl]
 800503e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005040:	d015      	beq.n	800506e <_svfiprintf_r+0xfa>
 8005042:	9a07      	ldr	r2, [sp, #28]
 8005044:	4654      	mov	r4, sl
 8005046:	2000      	movs	r0, #0
 8005048:	f04f 0c0a 	mov.w	ip, #10
 800504c:	4621      	mov	r1, r4
 800504e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005052:	3b30      	subs	r3, #48	@ 0x30
 8005054:	2b09      	cmp	r3, #9
 8005056:	d94b      	bls.n	80050f0 <_svfiprintf_r+0x17c>
 8005058:	b1b0      	cbz	r0, 8005088 <_svfiprintf_r+0x114>
 800505a:	9207      	str	r2, [sp, #28]
 800505c:	e014      	b.n	8005088 <_svfiprintf_r+0x114>
 800505e:	eba0 0308 	sub.w	r3, r0, r8
 8005062:	fa09 f303 	lsl.w	r3, r9, r3
 8005066:	4313      	orrs	r3, r2
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	46a2      	mov	sl, r4
 800506c:	e7d2      	b.n	8005014 <_svfiprintf_r+0xa0>
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9103      	str	r1, [sp, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfbb      	ittet	lt
 800507a:	425b      	neglt	r3, r3
 800507c:	f042 0202 	orrlt.w	r2, r2, #2
 8005080:	9307      	strge	r3, [sp, #28]
 8005082:	9307      	strlt	r3, [sp, #28]
 8005084:	bfb8      	it	lt
 8005086:	9204      	strlt	r2, [sp, #16]
 8005088:	7823      	ldrb	r3, [r4, #0]
 800508a:	2b2e      	cmp	r3, #46	@ 0x2e
 800508c:	d10a      	bne.n	80050a4 <_svfiprintf_r+0x130>
 800508e:	7863      	ldrb	r3, [r4, #1]
 8005090:	2b2a      	cmp	r3, #42	@ 0x2a
 8005092:	d132      	bne.n	80050fa <_svfiprintf_r+0x186>
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	1d1a      	adds	r2, r3, #4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	9203      	str	r2, [sp, #12]
 800509c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050a0:	3402      	adds	r4, #2
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005168 <_svfiprintf_r+0x1f4>
 80050a8:	7821      	ldrb	r1, [r4, #0]
 80050aa:	2203      	movs	r2, #3
 80050ac:	4650      	mov	r0, sl
 80050ae:	f7fb f8af 	bl	8000210 <memchr>
 80050b2:	b138      	cbz	r0, 80050c4 <_svfiprintf_r+0x150>
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	eba0 000a 	sub.w	r0, r0, sl
 80050ba:	2240      	movs	r2, #64	@ 0x40
 80050bc:	4082      	lsls	r2, r0
 80050be:	4313      	orrs	r3, r2
 80050c0:	3401      	adds	r4, #1
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c8:	4824      	ldr	r0, [pc, #144]	@ (800515c <_svfiprintf_r+0x1e8>)
 80050ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050ce:	2206      	movs	r2, #6
 80050d0:	f7fb f89e 	bl	8000210 <memchr>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d036      	beq.n	8005146 <_svfiprintf_r+0x1d2>
 80050d8:	4b21      	ldr	r3, [pc, #132]	@ (8005160 <_svfiprintf_r+0x1ec>)
 80050da:	bb1b      	cbnz	r3, 8005124 <_svfiprintf_r+0x1b0>
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	3307      	adds	r3, #7
 80050e0:	f023 0307 	bic.w	r3, r3, #7
 80050e4:	3308      	adds	r3, #8
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050ea:	4433      	add	r3, r6
 80050ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ee:	e76a      	b.n	8004fc6 <_svfiprintf_r+0x52>
 80050f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80050f4:	460c      	mov	r4, r1
 80050f6:	2001      	movs	r0, #1
 80050f8:	e7a8      	b.n	800504c <_svfiprintf_r+0xd8>
 80050fa:	2300      	movs	r3, #0
 80050fc:	3401      	adds	r4, #1
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	4619      	mov	r1, r3
 8005102:	f04f 0c0a 	mov.w	ip, #10
 8005106:	4620      	mov	r0, r4
 8005108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800510c:	3a30      	subs	r2, #48	@ 0x30
 800510e:	2a09      	cmp	r2, #9
 8005110:	d903      	bls.n	800511a <_svfiprintf_r+0x1a6>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0c6      	beq.n	80050a4 <_svfiprintf_r+0x130>
 8005116:	9105      	str	r1, [sp, #20]
 8005118:	e7c4      	b.n	80050a4 <_svfiprintf_r+0x130>
 800511a:	fb0c 2101 	mla	r1, ip, r1, r2
 800511e:	4604      	mov	r4, r0
 8005120:	2301      	movs	r3, #1
 8005122:	e7f0      	b.n	8005106 <_svfiprintf_r+0x192>
 8005124:	ab03      	add	r3, sp, #12
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	462a      	mov	r2, r5
 800512a:	4b0e      	ldr	r3, [pc, #56]	@ (8005164 <_svfiprintf_r+0x1f0>)
 800512c:	a904      	add	r1, sp, #16
 800512e:	4638      	mov	r0, r7
 8005130:	f3af 8000 	nop.w
 8005134:	1c42      	adds	r2, r0, #1
 8005136:	4606      	mov	r6, r0
 8005138:	d1d6      	bne.n	80050e8 <_svfiprintf_r+0x174>
 800513a:	89ab      	ldrh	r3, [r5, #12]
 800513c:	065b      	lsls	r3, r3, #25
 800513e:	f53f af2d 	bmi.w	8004f9c <_svfiprintf_r+0x28>
 8005142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005144:	e72c      	b.n	8004fa0 <_svfiprintf_r+0x2c>
 8005146:	ab03      	add	r3, sp, #12
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	462a      	mov	r2, r5
 800514c:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <_svfiprintf_r+0x1f0>)
 800514e:	a904      	add	r1, sp, #16
 8005150:	4638      	mov	r0, r7
 8005152:	f000 f9bb 	bl	80054cc <_printf_i>
 8005156:	e7ed      	b.n	8005134 <_svfiprintf_r+0x1c0>
 8005158:	08005fe1 	.word	0x08005fe1
 800515c:	08005feb 	.word	0x08005feb
 8005160:	00000000 	.word	0x00000000
 8005164:	08004ebd 	.word	0x08004ebd
 8005168:	08005fe7 	.word	0x08005fe7

0800516c <__sfputc_r>:
 800516c:	6893      	ldr	r3, [r2, #8]
 800516e:	3b01      	subs	r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	b410      	push	{r4}
 8005174:	6093      	str	r3, [r2, #8]
 8005176:	da08      	bge.n	800518a <__sfputc_r+0x1e>
 8005178:	6994      	ldr	r4, [r2, #24]
 800517a:	42a3      	cmp	r3, r4
 800517c:	db01      	blt.n	8005182 <__sfputc_r+0x16>
 800517e:	290a      	cmp	r1, #10
 8005180:	d103      	bne.n	800518a <__sfputc_r+0x1e>
 8005182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005186:	f7ff bbc2 	b.w	800490e <__swbuf_r>
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	1c58      	adds	r0, r3, #1
 800518e:	6010      	str	r0, [r2, #0]
 8005190:	7019      	strb	r1, [r3, #0]
 8005192:	4608      	mov	r0, r1
 8005194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005198:	4770      	bx	lr

0800519a <__sfputs_r>:
 800519a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519c:	4606      	mov	r6, r0
 800519e:	460f      	mov	r7, r1
 80051a0:	4614      	mov	r4, r2
 80051a2:	18d5      	adds	r5, r2, r3
 80051a4:	42ac      	cmp	r4, r5
 80051a6:	d101      	bne.n	80051ac <__sfputs_r+0x12>
 80051a8:	2000      	movs	r0, #0
 80051aa:	e007      	b.n	80051bc <__sfputs_r+0x22>
 80051ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b0:	463a      	mov	r2, r7
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7ff ffda 	bl	800516c <__sfputc_r>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d1f3      	bne.n	80051a4 <__sfputs_r+0xa>
 80051bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051c0 <_vfiprintf_r>:
 80051c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	460d      	mov	r5, r1
 80051c6:	b09d      	sub	sp, #116	@ 0x74
 80051c8:	4614      	mov	r4, r2
 80051ca:	4698      	mov	r8, r3
 80051cc:	4606      	mov	r6, r0
 80051ce:	b118      	cbz	r0, 80051d8 <_vfiprintf_r+0x18>
 80051d0:	6a03      	ldr	r3, [r0, #32]
 80051d2:	b90b      	cbnz	r3, 80051d8 <_vfiprintf_r+0x18>
 80051d4:	f7ff fa88 	bl	80046e8 <__sinit>
 80051d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051da:	07d9      	lsls	r1, r3, #31
 80051dc:	d405      	bmi.n	80051ea <_vfiprintf_r+0x2a>
 80051de:	89ab      	ldrh	r3, [r5, #12]
 80051e0:	059a      	lsls	r2, r3, #22
 80051e2:	d402      	bmi.n	80051ea <_vfiprintf_r+0x2a>
 80051e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051e6:	f7ff fd32 	bl	8004c4e <__retarget_lock_acquire_recursive>
 80051ea:	89ab      	ldrh	r3, [r5, #12]
 80051ec:	071b      	lsls	r3, r3, #28
 80051ee:	d501      	bpl.n	80051f4 <_vfiprintf_r+0x34>
 80051f0:	692b      	ldr	r3, [r5, #16]
 80051f2:	b99b      	cbnz	r3, 800521c <_vfiprintf_r+0x5c>
 80051f4:	4629      	mov	r1, r5
 80051f6:	4630      	mov	r0, r6
 80051f8:	f7ff fbc8 	bl	800498c <__swsetup_r>
 80051fc:	b170      	cbz	r0, 800521c <_vfiprintf_r+0x5c>
 80051fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005200:	07dc      	lsls	r4, r3, #31
 8005202:	d504      	bpl.n	800520e <_vfiprintf_r+0x4e>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	b01d      	add	sp, #116	@ 0x74
 800520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520e:	89ab      	ldrh	r3, [r5, #12]
 8005210:	0598      	lsls	r0, r3, #22
 8005212:	d4f7      	bmi.n	8005204 <_vfiprintf_r+0x44>
 8005214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005216:	f7ff fd1b 	bl	8004c50 <__retarget_lock_release_recursive>
 800521a:	e7f3      	b.n	8005204 <_vfiprintf_r+0x44>
 800521c:	2300      	movs	r3, #0
 800521e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005220:	2320      	movs	r3, #32
 8005222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005226:	f8cd 800c 	str.w	r8, [sp, #12]
 800522a:	2330      	movs	r3, #48	@ 0x30
 800522c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053dc <_vfiprintf_r+0x21c>
 8005230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005234:	f04f 0901 	mov.w	r9, #1
 8005238:	4623      	mov	r3, r4
 800523a:	469a      	mov	sl, r3
 800523c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005240:	b10a      	cbz	r2, 8005246 <_vfiprintf_r+0x86>
 8005242:	2a25      	cmp	r2, #37	@ 0x25
 8005244:	d1f9      	bne.n	800523a <_vfiprintf_r+0x7a>
 8005246:	ebba 0b04 	subs.w	fp, sl, r4
 800524a:	d00b      	beq.n	8005264 <_vfiprintf_r+0xa4>
 800524c:	465b      	mov	r3, fp
 800524e:	4622      	mov	r2, r4
 8005250:	4629      	mov	r1, r5
 8005252:	4630      	mov	r0, r6
 8005254:	f7ff ffa1 	bl	800519a <__sfputs_r>
 8005258:	3001      	adds	r0, #1
 800525a:	f000 80a7 	beq.w	80053ac <_vfiprintf_r+0x1ec>
 800525e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005260:	445a      	add	r2, fp
 8005262:	9209      	str	r2, [sp, #36]	@ 0x24
 8005264:	f89a 3000 	ldrb.w	r3, [sl]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 809f 	beq.w	80053ac <_vfiprintf_r+0x1ec>
 800526e:	2300      	movs	r3, #0
 8005270:	f04f 32ff 	mov.w	r2, #4294967295
 8005274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005278:	f10a 0a01 	add.w	sl, sl, #1
 800527c:	9304      	str	r3, [sp, #16]
 800527e:	9307      	str	r3, [sp, #28]
 8005280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005284:	931a      	str	r3, [sp, #104]	@ 0x68
 8005286:	4654      	mov	r4, sl
 8005288:	2205      	movs	r2, #5
 800528a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528e:	4853      	ldr	r0, [pc, #332]	@ (80053dc <_vfiprintf_r+0x21c>)
 8005290:	f7fa ffbe 	bl	8000210 <memchr>
 8005294:	9a04      	ldr	r2, [sp, #16]
 8005296:	b9d8      	cbnz	r0, 80052d0 <_vfiprintf_r+0x110>
 8005298:	06d1      	lsls	r1, r2, #27
 800529a:	bf44      	itt	mi
 800529c:	2320      	movmi	r3, #32
 800529e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052a2:	0713      	lsls	r3, r2, #28
 80052a4:	bf44      	itt	mi
 80052a6:	232b      	movmi	r3, #43	@ 0x2b
 80052a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ac:	f89a 3000 	ldrb.w	r3, [sl]
 80052b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80052b2:	d015      	beq.n	80052e0 <_vfiprintf_r+0x120>
 80052b4:	9a07      	ldr	r2, [sp, #28]
 80052b6:	4654      	mov	r4, sl
 80052b8:	2000      	movs	r0, #0
 80052ba:	f04f 0c0a 	mov.w	ip, #10
 80052be:	4621      	mov	r1, r4
 80052c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c4:	3b30      	subs	r3, #48	@ 0x30
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	d94b      	bls.n	8005362 <_vfiprintf_r+0x1a2>
 80052ca:	b1b0      	cbz	r0, 80052fa <_vfiprintf_r+0x13a>
 80052cc:	9207      	str	r2, [sp, #28]
 80052ce:	e014      	b.n	80052fa <_vfiprintf_r+0x13a>
 80052d0:	eba0 0308 	sub.w	r3, r0, r8
 80052d4:	fa09 f303 	lsl.w	r3, r9, r3
 80052d8:	4313      	orrs	r3, r2
 80052da:	9304      	str	r3, [sp, #16]
 80052dc:	46a2      	mov	sl, r4
 80052de:	e7d2      	b.n	8005286 <_vfiprintf_r+0xc6>
 80052e0:	9b03      	ldr	r3, [sp, #12]
 80052e2:	1d19      	adds	r1, r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	9103      	str	r1, [sp, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bfbb      	ittet	lt
 80052ec:	425b      	neglt	r3, r3
 80052ee:	f042 0202 	orrlt.w	r2, r2, #2
 80052f2:	9307      	strge	r3, [sp, #28]
 80052f4:	9307      	strlt	r3, [sp, #28]
 80052f6:	bfb8      	it	lt
 80052f8:	9204      	strlt	r2, [sp, #16]
 80052fa:	7823      	ldrb	r3, [r4, #0]
 80052fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80052fe:	d10a      	bne.n	8005316 <_vfiprintf_r+0x156>
 8005300:	7863      	ldrb	r3, [r4, #1]
 8005302:	2b2a      	cmp	r3, #42	@ 0x2a
 8005304:	d132      	bne.n	800536c <_vfiprintf_r+0x1ac>
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	9203      	str	r2, [sp, #12]
 800530e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005312:	3402      	adds	r4, #2
 8005314:	9305      	str	r3, [sp, #20]
 8005316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053ec <_vfiprintf_r+0x22c>
 800531a:	7821      	ldrb	r1, [r4, #0]
 800531c:	2203      	movs	r2, #3
 800531e:	4650      	mov	r0, sl
 8005320:	f7fa ff76 	bl	8000210 <memchr>
 8005324:	b138      	cbz	r0, 8005336 <_vfiprintf_r+0x176>
 8005326:	9b04      	ldr	r3, [sp, #16]
 8005328:	eba0 000a 	sub.w	r0, r0, sl
 800532c:	2240      	movs	r2, #64	@ 0x40
 800532e:	4082      	lsls	r2, r0
 8005330:	4313      	orrs	r3, r2
 8005332:	3401      	adds	r4, #1
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533a:	4829      	ldr	r0, [pc, #164]	@ (80053e0 <_vfiprintf_r+0x220>)
 800533c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005340:	2206      	movs	r2, #6
 8005342:	f7fa ff65 	bl	8000210 <memchr>
 8005346:	2800      	cmp	r0, #0
 8005348:	d03f      	beq.n	80053ca <_vfiprintf_r+0x20a>
 800534a:	4b26      	ldr	r3, [pc, #152]	@ (80053e4 <_vfiprintf_r+0x224>)
 800534c:	bb1b      	cbnz	r3, 8005396 <_vfiprintf_r+0x1d6>
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	3307      	adds	r3, #7
 8005352:	f023 0307 	bic.w	r3, r3, #7
 8005356:	3308      	adds	r3, #8
 8005358:	9303      	str	r3, [sp, #12]
 800535a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535c:	443b      	add	r3, r7
 800535e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005360:	e76a      	b.n	8005238 <_vfiprintf_r+0x78>
 8005362:	fb0c 3202 	mla	r2, ip, r2, r3
 8005366:	460c      	mov	r4, r1
 8005368:	2001      	movs	r0, #1
 800536a:	e7a8      	b.n	80052be <_vfiprintf_r+0xfe>
 800536c:	2300      	movs	r3, #0
 800536e:	3401      	adds	r4, #1
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	4619      	mov	r1, r3
 8005374:	f04f 0c0a 	mov.w	ip, #10
 8005378:	4620      	mov	r0, r4
 800537a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800537e:	3a30      	subs	r2, #48	@ 0x30
 8005380:	2a09      	cmp	r2, #9
 8005382:	d903      	bls.n	800538c <_vfiprintf_r+0x1cc>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0c6      	beq.n	8005316 <_vfiprintf_r+0x156>
 8005388:	9105      	str	r1, [sp, #20]
 800538a:	e7c4      	b.n	8005316 <_vfiprintf_r+0x156>
 800538c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005390:	4604      	mov	r4, r0
 8005392:	2301      	movs	r3, #1
 8005394:	e7f0      	b.n	8005378 <_vfiprintf_r+0x1b8>
 8005396:	ab03      	add	r3, sp, #12
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	462a      	mov	r2, r5
 800539c:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <_vfiprintf_r+0x228>)
 800539e:	a904      	add	r1, sp, #16
 80053a0:	4630      	mov	r0, r6
 80053a2:	f3af 8000 	nop.w
 80053a6:	4607      	mov	r7, r0
 80053a8:	1c78      	adds	r0, r7, #1
 80053aa:	d1d6      	bne.n	800535a <_vfiprintf_r+0x19a>
 80053ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053ae:	07d9      	lsls	r1, r3, #31
 80053b0:	d405      	bmi.n	80053be <_vfiprintf_r+0x1fe>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	059a      	lsls	r2, r3, #22
 80053b6:	d402      	bmi.n	80053be <_vfiprintf_r+0x1fe>
 80053b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053ba:	f7ff fc49 	bl	8004c50 <__retarget_lock_release_recursive>
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	065b      	lsls	r3, r3, #25
 80053c2:	f53f af1f 	bmi.w	8005204 <_vfiprintf_r+0x44>
 80053c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053c8:	e71e      	b.n	8005208 <_vfiprintf_r+0x48>
 80053ca:	ab03      	add	r3, sp, #12
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	462a      	mov	r2, r5
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <_vfiprintf_r+0x228>)
 80053d2:	a904      	add	r1, sp, #16
 80053d4:	4630      	mov	r0, r6
 80053d6:	f000 f879 	bl	80054cc <_printf_i>
 80053da:	e7e4      	b.n	80053a6 <_vfiprintf_r+0x1e6>
 80053dc:	08005fe1 	.word	0x08005fe1
 80053e0:	08005feb 	.word	0x08005feb
 80053e4:	00000000 	.word	0x00000000
 80053e8:	0800519b 	.word	0x0800519b
 80053ec:	08005fe7 	.word	0x08005fe7

080053f0 <_printf_common>:
 80053f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f4:	4616      	mov	r6, r2
 80053f6:	4698      	mov	r8, r3
 80053f8:	688a      	ldr	r2, [r1, #8]
 80053fa:	690b      	ldr	r3, [r1, #16]
 80053fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005400:	4293      	cmp	r3, r2
 8005402:	bfb8      	it	lt
 8005404:	4613      	movlt	r3, r2
 8005406:	6033      	str	r3, [r6, #0]
 8005408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800540c:	4607      	mov	r7, r0
 800540e:	460c      	mov	r4, r1
 8005410:	b10a      	cbz	r2, 8005416 <_printf_common+0x26>
 8005412:	3301      	adds	r3, #1
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	0699      	lsls	r1, r3, #26
 800541a:	bf42      	ittt	mi
 800541c:	6833      	ldrmi	r3, [r6, #0]
 800541e:	3302      	addmi	r3, #2
 8005420:	6033      	strmi	r3, [r6, #0]
 8005422:	6825      	ldr	r5, [r4, #0]
 8005424:	f015 0506 	ands.w	r5, r5, #6
 8005428:	d106      	bne.n	8005438 <_printf_common+0x48>
 800542a:	f104 0a19 	add.w	sl, r4, #25
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	6832      	ldr	r2, [r6, #0]
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	42ab      	cmp	r3, r5
 8005436:	dc26      	bgt.n	8005486 <_printf_common+0x96>
 8005438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	3b00      	subs	r3, #0
 8005440:	bf18      	it	ne
 8005442:	2301      	movne	r3, #1
 8005444:	0692      	lsls	r2, r2, #26
 8005446:	d42b      	bmi.n	80054a0 <_printf_common+0xb0>
 8005448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800544c:	4641      	mov	r1, r8
 800544e:	4638      	mov	r0, r7
 8005450:	47c8      	blx	r9
 8005452:	3001      	adds	r0, #1
 8005454:	d01e      	beq.n	8005494 <_printf_common+0xa4>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	6922      	ldr	r2, [r4, #16]
 800545a:	f003 0306 	and.w	r3, r3, #6
 800545e:	2b04      	cmp	r3, #4
 8005460:	bf02      	ittt	eq
 8005462:	68e5      	ldreq	r5, [r4, #12]
 8005464:	6833      	ldreq	r3, [r6, #0]
 8005466:	1aed      	subeq	r5, r5, r3
 8005468:	68a3      	ldr	r3, [r4, #8]
 800546a:	bf0c      	ite	eq
 800546c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005470:	2500      	movne	r5, #0
 8005472:	4293      	cmp	r3, r2
 8005474:	bfc4      	itt	gt
 8005476:	1a9b      	subgt	r3, r3, r2
 8005478:	18ed      	addgt	r5, r5, r3
 800547a:	2600      	movs	r6, #0
 800547c:	341a      	adds	r4, #26
 800547e:	42b5      	cmp	r5, r6
 8005480:	d11a      	bne.n	80054b8 <_printf_common+0xc8>
 8005482:	2000      	movs	r0, #0
 8005484:	e008      	b.n	8005498 <_printf_common+0xa8>
 8005486:	2301      	movs	r3, #1
 8005488:	4652      	mov	r2, sl
 800548a:	4641      	mov	r1, r8
 800548c:	4638      	mov	r0, r7
 800548e:	47c8      	blx	r9
 8005490:	3001      	adds	r0, #1
 8005492:	d103      	bne.n	800549c <_printf_common+0xac>
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549c:	3501      	adds	r5, #1
 800549e:	e7c6      	b.n	800542e <_printf_common+0x3e>
 80054a0:	18e1      	adds	r1, r4, r3
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	2030      	movs	r0, #48	@ 0x30
 80054a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054aa:	4422      	add	r2, r4
 80054ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054b4:	3302      	adds	r3, #2
 80054b6:	e7c7      	b.n	8005448 <_printf_common+0x58>
 80054b8:	2301      	movs	r3, #1
 80054ba:	4622      	mov	r2, r4
 80054bc:	4641      	mov	r1, r8
 80054be:	4638      	mov	r0, r7
 80054c0:	47c8      	blx	r9
 80054c2:	3001      	adds	r0, #1
 80054c4:	d0e6      	beq.n	8005494 <_printf_common+0xa4>
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7d9      	b.n	800547e <_printf_common+0x8e>
	...

080054cc <_printf_i>:
 80054cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	7e0f      	ldrb	r7, [r1, #24]
 80054d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054d4:	2f78      	cmp	r7, #120	@ 0x78
 80054d6:	4691      	mov	r9, r2
 80054d8:	4680      	mov	r8, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	469a      	mov	sl, r3
 80054de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054e2:	d807      	bhi.n	80054f4 <_printf_i+0x28>
 80054e4:	2f62      	cmp	r7, #98	@ 0x62
 80054e6:	d80a      	bhi.n	80054fe <_printf_i+0x32>
 80054e8:	2f00      	cmp	r7, #0
 80054ea:	f000 80d1 	beq.w	8005690 <_printf_i+0x1c4>
 80054ee:	2f58      	cmp	r7, #88	@ 0x58
 80054f0:	f000 80b8 	beq.w	8005664 <_printf_i+0x198>
 80054f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054fc:	e03a      	b.n	8005574 <_printf_i+0xa8>
 80054fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005502:	2b15      	cmp	r3, #21
 8005504:	d8f6      	bhi.n	80054f4 <_printf_i+0x28>
 8005506:	a101      	add	r1, pc, #4	@ (adr r1, 800550c <_printf_i+0x40>)
 8005508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800550c:	08005565 	.word	0x08005565
 8005510:	08005579 	.word	0x08005579
 8005514:	080054f5 	.word	0x080054f5
 8005518:	080054f5 	.word	0x080054f5
 800551c:	080054f5 	.word	0x080054f5
 8005520:	080054f5 	.word	0x080054f5
 8005524:	08005579 	.word	0x08005579
 8005528:	080054f5 	.word	0x080054f5
 800552c:	080054f5 	.word	0x080054f5
 8005530:	080054f5 	.word	0x080054f5
 8005534:	080054f5 	.word	0x080054f5
 8005538:	08005677 	.word	0x08005677
 800553c:	080055a3 	.word	0x080055a3
 8005540:	08005631 	.word	0x08005631
 8005544:	080054f5 	.word	0x080054f5
 8005548:	080054f5 	.word	0x080054f5
 800554c:	08005699 	.word	0x08005699
 8005550:	080054f5 	.word	0x080054f5
 8005554:	080055a3 	.word	0x080055a3
 8005558:	080054f5 	.word	0x080054f5
 800555c:	080054f5 	.word	0x080054f5
 8005560:	08005639 	.word	0x08005639
 8005564:	6833      	ldr	r3, [r6, #0]
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6032      	str	r2, [r6, #0]
 800556c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005574:	2301      	movs	r3, #1
 8005576:	e09c      	b.n	80056b2 <_printf_i+0x1e6>
 8005578:	6833      	ldr	r3, [r6, #0]
 800557a:	6820      	ldr	r0, [r4, #0]
 800557c:	1d19      	adds	r1, r3, #4
 800557e:	6031      	str	r1, [r6, #0]
 8005580:	0606      	lsls	r6, r0, #24
 8005582:	d501      	bpl.n	8005588 <_printf_i+0xbc>
 8005584:	681d      	ldr	r5, [r3, #0]
 8005586:	e003      	b.n	8005590 <_printf_i+0xc4>
 8005588:	0645      	lsls	r5, r0, #25
 800558a:	d5fb      	bpl.n	8005584 <_printf_i+0xb8>
 800558c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005590:	2d00      	cmp	r5, #0
 8005592:	da03      	bge.n	800559c <_printf_i+0xd0>
 8005594:	232d      	movs	r3, #45	@ 0x2d
 8005596:	426d      	negs	r5, r5
 8005598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800559c:	4858      	ldr	r0, [pc, #352]	@ (8005700 <_printf_i+0x234>)
 800559e:	230a      	movs	r3, #10
 80055a0:	e011      	b.n	80055c6 <_printf_i+0xfa>
 80055a2:	6821      	ldr	r1, [r4, #0]
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	0608      	lsls	r0, r1, #24
 80055a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055ac:	d402      	bmi.n	80055b4 <_printf_i+0xe8>
 80055ae:	0649      	lsls	r1, r1, #25
 80055b0:	bf48      	it	mi
 80055b2:	b2ad      	uxthmi	r5, r5
 80055b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055b6:	4852      	ldr	r0, [pc, #328]	@ (8005700 <_printf_i+0x234>)
 80055b8:	6033      	str	r3, [r6, #0]
 80055ba:	bf14      	ite	ne
 80055bc:	230a      	movne	r3, #10
 80055be:	2308      	moveq	r3, #8
 80055c0:	2100      	movs	r1, #0
 80055c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055c6:	6866      	ldr	r6, [r4, #4]
 80055c8:	60a6      	str	r6, [r4, #8]
 80055ca:	2e00      	cmp	r6, #0
 80055cc:	db05      	blt.n	80055da <_printf_i+0x10e>
 80055ce:	6821      	ldr	r1, [r4, #0]
 80055d0:	432e      	orrs	r6, r5
 80055d2:	f021 0104 	bic.w	r1, r1, #4
 80055d6:	6021      	str	r1, [r4, #0]
 80055d8:	d04b      	beq.n	8005672 <_printf_i+0x1a6>
 80055da:	4616      	mov	r6, r2
 80055dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80055e0:	fb03 5711 	mls	r7, r3, r1, r5
 80055e4:	5dc7      	ldrb	r7, [r0, r7]
 80055e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055ea:	462f      	mov	r7, r5
 80055ec:	42bb      	cmp	r3, r7
 80055ee:	460d      	mov	r5, r1
 80055f0:	d9f4      	bls.n	80055dc <_printf_i+0x110>
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d10b      	bne.n	800560e <_printf_i+0x142>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	07df      	lsls	r7, r3, #31
 80055fa:	d508      	bpl.n	800560e <_printf_i+0x142>
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	6861      	ldr	r1, [r4, #4]
 8005600:	4299      	cmp	r1, r3
 8005602:	bfde      	ittt	le
 8005604:	2330      	movle	r3, #48	@ 0x30
 8005606:	f806 3c01 	strble.w	r3, [r6, #-1]
 800560a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800560e:	1b92      	subs	r2, r2, r6
 8005610:	6122      	str	r2, [r4, #16]
 8005612:	f8cd a000 	str.w	sl, [sp]
 8005616:	464b      	mov	r3, r9
 8005618:	aa03      	add	r2, sp, #12
 800561a:	4621      	mov	r1, r4
 800561c:	4640      	mov	r0, r8
 800561e:	f7ff fee7 	bl	80053f0 <_printf_common>
 8005622:	3001      	adds	r0, #1
 8005624:	d14a      	bne.n	80056bc <_printf_i+0x1f0>
 8005626:	f04f 30ff 	mov.w	r0, #4294967295
 800562a:	b004      	add	sp, #16
 800562c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	f043 0320 	orr.w	r3, r3, #32
 8005636:	6023      	str	r3, [r4, #0]
 8005638:	4832      	ldr	r0, [pc, #200]	@ (8005704 <_printf_i+0x238>)
 800563a:	2778      	movs	r7, #120	@ 0x78
 800563c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	6831      	ldr	r1, [r6, #0]
 8005644:	061f      	lsls	r7, r3, #24
 8005646:	f851 5b04 	ldr.w	r5, [r1], #4
 800564a:	d402      	bmi.n	8005652 <_printf_i+0x186>
 800564c:	065f      	lsls	r7, r3, #25
 800564e:	bf48      	it	mi
 8005650:	b2ad      	uxthmi	r5, r5
 8005652:	6031      	str	r1, [r6, #0]
 8005654:	07d9      	lsls	r1, r3, #31
 8005656:	bf44      	itt	mi
 8005658:	f043 0320 	orrmi.w	r3, r3, #32
 800565c:	6023      	strmi	r3, [r4, #0]
 800565e:	b11d      	cbz	r5, 8005668 <_printf_i+0x19c>
 8005660:	2310      	movs	r3, #16
 8005662:	e7ad      	b.n	80055c0 <_printf_i+0xf4>
 8005664:	4826      	ldr	r0, [pc, #152]	@ (8005700 <_printf_i+0x234>)
 8005666:	e7e9      	b.n	800563c <_printf_i+0x170>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	f023 0320 	bic.w	r3, r3, #32
 800566e:	6023      	str	r3, [r4, #0]
 8005670:	e7f6      	b.n	8005660 <_printf_i+0x194>
 8005672:	4616      	mov	r6, r2
 8005674:	e7bd      	b.n	80055f2 <_printf_i+0x126>
 8005676:	6833      	ldr	r3, [r6, #0]
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	6961      	ldr	r1, [r4, #20]
 800567c:	1d18      	adds	r0, r3, #4
 800567e:	6030      	str	r0, [r6, #0]
 8005680:	062e      	lsls	r6, r5, #24
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	d501      	bpl.n	800568a <_printf_i+0x1be>
 8005686:	6019      	str	r1, [r3, #0]
 8005688:	e002      	b.n	8005690 <_printf_i+0x1c4>
 800568a:	0668      	lsls	r0, r5, #25
 800568c:	d5fb      	bpl.n	8005686 <_printf_i+0x1ba>
 800568e:	8019      	strh	r1, [r3, #0]
 8005690:	2300      	movs	r3, #0
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	4616      	mov	r6, r2
 8005696:	e7bc      	b.n	8005612 <_printf_i+0x146>
 8005698:	6833      	ldr	r3, [r6, #0]
 800569a:	1d1a      	adds	r2, r3, #4
 800569c:	6032      	str	r2, [r6, #0]
 800569e:	681e      	ldr	r6, [r3, #0]
 80056a0:	6862      	ldr	r2, [r4, #4]
 80056a2:	2100      	movs	r1, #0
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7fa fdb3 	bl	8000210 <memchr>
 80056aa:	b108      	cbz	r0, 80056b0 <_printf_i+0x1e4>
 80056ac:	1b80      	subs	r0, r0, r6
 80056ae:	6060      	str	r0, [r4, #4]
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	2300      	movs	r3, #0
 80056b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ba:	e7aa      	b.n	8005612 <_printf_i+0x146>
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	4632      	mov	r2, r6
 80056c0:	4649      	mov	r1, r9
 80056c2:	4640      	mov	r0, r8
 80056c4:	47d0      	blx	sl
 80056c6:	3001      	adds	r0, #1
 80056c8:	d0ad      	beq.n	8005626 <_printf_i+0x15a>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	079b      	lsls	r3, r3, #30
 80056ce:	d413      	bmi.n	80056f8 <_printf_i+0x22c>
 80056d0:	68e0      	ldr	r0, [r4, #12]
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	4298      	cmp	r0, r3
 80056d6:	bfb8      	it	lt
 80056d8:	4618      	movlt	r0, r3
 80056da:	e7a6      	b.n	800562a <_printf_i+0x15e>
 80056dc:	2301      	movs	r3, #1
 80056de:	4632      	mov	r2, r6
 80056e0:	4649      	mov	r1, r9
 80056e2:	4640      	mov	r0, r8
 80056e4:	47d0      	blx	sl
 80056e6:	3001      	adds	r0, #1
 80056e8:	d09d      	beq.n	8005626 <_printf_i+0x15a>
 80056ea:	3501      	adds	r5, #1
 80056ec:	68e3      	ldr	r3, [r4, #12]
 80056ee:	9903      	ldr	r1, [sp, #12]
 80056f0:	1a5b      	subs	r3, r3, r1
 80056f2:	42ab      	cmp	r3, r5
 80056f4:	dcf2      	bgt.n	80056dc <_printf_i+0x210>
 80056f6:	e7eb      	b.n	80056d0 <_printf_i+0x204>
 80056f8:	2500      	movs	r5, #0
 80056fa:	f104 0619 	add.w	r6, r4, #25
 80056fe:	e7f5      	b.n	80056ec <_printf_i+0x220>
 8005700:	08005ff2 	.word	0x08005ff2
 8005704:	08006003 	.word	0x08006003

08005708 <__sflush_r>:
 8005708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800570c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005710:	0716      	lsls	r6, r2, #28
 8005712:	4605      	mov	r5, r0
 8005714:	460c      	mov	r4, r1
 8005716:	d454      	bmi.n	80057c2 <__sflush_r+0xba>
 8005718:	684b      	ldr	r3, [r1, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	dc02      	bgt.n	8005724 <__sflush_r+0x1c>
 800571e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	dd48      	ble.n	80057b6 <__sflush_r+0xae>
 8005724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005726:	2e00      	cmp	r6, #0
 8005728:	d045      	beq.n	80057b6 <__sflush_r+0xae>
 800572a:	2300      	movs	r3, #0
 800572c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005730:	682f      	ldr	r7, [r5, #0]
 8005732:	6a21      	ldr	r1, [r4, #32]
 8005734:	602b      	str	r3, [r5, #0]
 8005736:	d030      	beq.n	800579a <__sflush_r+0x92>
 8005738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	0759      	lsls	r1, r3, #29
 800573e:	d505      	bpl.n	800574c <__sflush_r+0x44>
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005746:	b10b      	cbz	r3, 800574c <__sflush_r+0x44>
 8005748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	2300      	movs	r3, #0
 800574e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005750:	6a21      	ldr	r1, [r4, #32]
 8005752:	4628      	mov	r0, r5
 8005754:	47b0      	blx	r6
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	d106      	bne.n	800576a <__sflush_r+0x62>
 800575c:	6829      	ldr	r1, [r5, #0]
 800575e:	291d      	cmp	r1, #29
 8005760:	d82b      	bhi.n	80057ba <__sflush_r+0xb2>
 8005762:	4a2a      	ldr	r2, [pc, #168]	@ (800580c <__sflush_r+0x104>)
 8005764:	40ca      	lsrs	r2, r1
 8005766:	07d6      	lsls	r6, r2, #31
 8005768:	d527      	bpl.n	80057ba <__sflush_r+0xb2>
 800576a:	2200      	movs	r2, #0
 800576c:	6062      	str	r2, [r4, #4]
 800576e:	04d9      	lsls	r1, r3, #19
 8005770:	6922      	ldr	r2, [r4, #16]
 8005772:	6022      	str	r2, [r4, #0]
 8005774:	d504      	bpl.n	8005780 <__sflush_r+0x78>
 8005776:	1c42      	adds	r2, r0, #1
 8005778:	d101      	bne.n	800577e <__sflush_r+0x76>
 800577a:	682b      	ldr	r3, [r5, #0]
 800577c:	b903      	cbnz	r3, 8005780 <__sflush_r+0x78>
 800577e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005782:	602f      	str	r7, [r5, #0]
 8005784:	b1b9      	cbz	r1, 80057b6 <__sflush_r+0xae>
 8005786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800578a:	4299      	cmp	r1, r3
 800578c:	d002      	beq.n	8005794 <__sflush_r+0x8c>
 800578e:	4628      	mov	r0, r5
 8005790:	f7ff fa94 	bl	8004cbc <_free_r>
 8005794:	2300      	movs	r3, #0
 8005796:	6363      	str	r3, [r4, #52]	@ 0x34
 8005798:	e00d      	b.n	80057b6 <__sflush_r+0xae>
 800579a:	2301      	movs	r3, #1
 800579c:	4628      	mov	r0, r5
 800579e:	47b0      	blx	r6
 80057a0:	4602      	mov	r2, r0
 80057a2:	1c50      	adds	r0, r2, #1
 80057a4:	d1c9      	bne.n	800573a <__sflush_r+0x32>
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0c6      	beq.n	800573a <__sflush_r+0x32>
 80057ac:	2b1d      	cmp	r3, #29
 80057ae:	d001      	beq.n	80057b4 <__sflush_r+0xac>
 80057b0:	2b16      	cmp	r3, #22
 80057b2:	d11e      	bne.n	80057f2 <__sflush_r+0xea>
 80057b4:	602f      	str	r7, [r5, #0]
 80057b6:	2000      	movs	r0, #0
 80057b8:	e022      	b.n	8005800 <__sflush_r+0xf8>
 80057ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057be:	b21b      	sxth	r3, r3
 80057c0:	e01b      	b.n	80057fa <__sflush_r+0xf2>
 80057c2:	690f      	ldr	r7, [r1, #16]
 80057c4:	2f00      	cmp	r7, #0
 80057c6:	d0f6      	beq.n	80057b6 <__sflush_r+0xae>
 80057c8:	0793      	lsls	r3, r2, #30
 80057ca:	680e      	ldr	r6, [r1, #0]
 80057cc:	bf08      	it	eq
 80057ce:	694b      	ldreq	r3, [r1, #20]
 80057d0:	600f      	str	r7, [r1, #0]
 80057d2:	bf18      	it	ne
 80057d4:	2300      	movne	r3, #0
 80057d6:	eba6 0807 	sub.w	r8, r6, r7
 80057da:	608b      	str	r3, [r1, #8]
 80057dc:	f1b8 0f00 	cmp.w	r8, #0
 80057e0:	dde9      	ble.n	80057b6 <__sflush_r+0xae>
 80057e2:	6a21      	ldr	r1, [r4, #32]
 80057e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057e6:	4643      	mov	r3, r8
 80057e8:	463a      	mov	r2, r7
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b0      	blx	r6
 80057ee:	2800      	cmp	r0, #0
 80057f0:	dc08      	bgt.n	8005804 <__sflush_r+0xfc>
 80057f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005804:	4407      	add	r7, r0
 8005806:	eba8 0800 	sub.w	r8, r8, r0
 800580a:	e7e7      	b.n	80057dc <__sflush_r+0xd4>
 800580c:	20400001 	.word	0x20400001

08005810 <_fflush_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	4605      	mov	r5, r0
 8005816:	460c      	mov	r4, r1
 8005818:	b913      	cbnz	r3, 8005820 <_fflush_r+0x10>
 800581a:	2500      	movs	r5, #0
 800581c:	4628      	mov	r0, r5
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	b118      	cbz	r0, 800582a <_fflush_r+0x1a>
 8005822:	6a03      	ldr	r3, [r0, #32]
 8005824:	b90b      	cbnz	r3, 800582a <_fflush_r+0x1a>
 8005826:	f7fe ff5f 	bl	80046e8 <__sinit>
 800582a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f3      	beq.n	800581a <_fflush_r+0xa>
 8005832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005834:	07d0      	lsls	r0, r2, #31
 8005836:	d404      	bmi.n	8005842 <_fflush_r+0x32>
 8005838:	0599      	lsls	r1, r3, #22
 800583a:	d402      	bmi.n	8005842 <_fflush_r+0x32>
 800583c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800583e:	f7ff fa06 	bl	8004c4e <__retarget_lock_acquire_recursive>
 8005842:	4628      	mov	r0, r5
 8005844:	4621      	mov	r1, r4
 8005846:	f7ff ff5f 	bl	8005708 <__sflush_r>
 800584a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800584c:	07da      	lsls	r2, r3, #31
 800584e:	4605      	mov	r5, r0
 8005850:	d4e4      	bmi.n	800581c <_fflush_r+0xc>
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	059b      	lsls	r3, r3, #22
 8005856:	d4e1      	bmi.n	800581c <_fflush_r+0xc>
 8005858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800585a:	f7ff f9f9 	bl	8004c50 <__retarget_lock_release_recursive>
 800585e:	e7dd      	b.n	800581c <_fflush_r+0xc>

08005860 <fiprintf>:
 8005860:	b40e      	push	{r1, r2, r3}
 8005862:	b503      	push	{r0, r1, lr}
 8005864:	4601      	mov	r1, r0
 8005866:	ab03      	add	r3, sp, #12
 8005868:	4805      	ldr	r0, [pc, #20]	@ (8005880 <fiprintf+0x20>)
 800586a:	f853 2b04 	ldr.w	r2, [r3], #4
 800586e:	6800      	ldr	r0, [r0, #0]
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	f7ff fca5 	bl	80051c0 <_vfiprintf_r>
 8005876:	b002      	add	sp, #8
 8005878:	f85d eb04 	ldr.w	lr, [sp], #4
 800587c:	b003      	add	sp, #12
 800587e:	4770      	bx	lr
 8005880:	20000024 	.word	0x20000024

08005884 <__swhatbuf_r>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	460c      	mov	r4, r1
 8005888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588c:	2900      	cmp	r1, #0
 800588e:	b096      	sub	sp, #88	@ 0x58
 8005890:	4615      	mov	r5, r2
 8005892:	461e      	mov	r6, r3
 8005894:	da0d      	bge.n	80058b2 <__swhatbuf_r+0x2e>
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	bf14      	ite	ne
 80058a2:	2340      	movne	r3, #64	@ 0x40
 80058a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058a8:	2000      	movs	r0, #0
 80058aa:	6031      	str	r1, [r6, #0]
 80058ac:	602b      	str	r3, [r5, #0]
 80058ae:	b016      	add	sp, #88	@ 0x58
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	466a      	mov	r2, sp
 80058b4:	f000 f896 	bl	80059e4 <_fstat_r>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	dbec      	blt.n	8005896 <__swhatbuf_r+0x12>
 80058bc:	9901      	ldr	r1, [sp, #4]
 80058be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058c6:	4259      	negs	r1, r3
 80058c8:	4159      	adcs	r1, r3
 80058ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058ce:	e7eb      	b.n	80058a8 <__swhatbuf_r+0x24>

080058d0 <__smakebuf_r>:
 80058d0:	898b      	ldrh	r3, [r1, #12]
 80058d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058d4:	079d      	lsls	r5, r3, #30
 80058d6:	4606      	mov	r6, r0
 80058d8:	460c      	mov	r4, r1
 80058da:	d507      	bpl.n	80058ec <__smakebuf_r+0x1c>
 80058dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	2301      	movs	r3, #1
 80058e6:	6163      	str	r3, [r4, #20]
 80058e8:	b003      	add	sp, #12
 80058ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ec:	ab01      	add	r3, sp, #4
 80058ee:	466a      	mov	r2, sp
 80058f0:	f7ff ffc8 	bl	8005884 <__swhatbuf_r>
 80058f4:	9f00      	ldr	r7, [sp, #0]
 80058f6:	4605      	mov	r5, r0
 80058f8:	4639      	mov	r1, r7
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff fa52 	bl	8004da4 <_malloc_r>
 8005900:	b948      	cbnz	r0, 8005916 <__smakebuf_r+0x46>
 8005902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005906:	059a      	lsls	r2, r3, #22
 8005908:	d4ee      	bmi.n	80058e8 <__smakebuf_r+0x18>
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	e7e2      	b.n	80058dc <__smakebuf_r+0xc>
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	6020      	str	r0, [r4, #0]
 800591a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005926:	b15b      	cbz	r3, 8005940 <__smakebuf_r+0x70>
 8005928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800592c:	4630      	mov	r0, r6
 800592e:	f000 f86b 	bl	8005a08 <_isatty_r>
 8005932:	b128      	cbz	r0, 8005940 <__smakebuf_r+0x70>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	431d      	orrs	r5, r3
 8005944:	81a5      	strh	r5, [r4, #12]
 8005946:	e7cf      	b.n	80058e8 <__smakebuf_r+0x18>

08005948 <_putc_r>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	460d      	mov	r5, r1
 800594c:	4614      	mov	r4, r2
 800594e:	4606      	mov	r6, r0
 8005950:	b118      	cbz	r0, 800595a <_putc_r+0x12>
 8005952:	6a03      	ldr	r3, [r0, #32]
 8005954:	b90b      	cbnz	r3, 800595a <_putc_r+0x12>
 8005956:	f7fe fec7 	bl	80046e8 <__sinit>
 800595a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800595c:	07d8      	lsls	r0, r3, #31
 800595e:	d405      	bmi.n	800596c <_putc_r+0x24>
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	0599      	lsls	r1, r3, #22
 8005964:	d402      	bmi.n	800596c <_putc_r+0x24>
 8005966:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005968:	f7ff f971 	bl	8004c4e <__retarget_lock_acquire_recursive>
 800596c:	68a3      	ldr	r3, [r4, #8]
 800596e:	3b01      	subs	r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	60a3      	str	r3, [r4, #8]
 8005974:	da05      	bge.n	8005982 <_putc_r+0x3a>
 8005976:	69a2      	ldr	r2, [r4, #24]
 8005978:	4293      	cmp	r3, r2
 800597a:	db12      	blt.n	80059a2 <_putc_r+0x5a>
 800597c:	b2eb      	uxtb	r3, r5
 800597e:	2b0a      	cmp	r3, #10
 8005980:	d00f      	beq.n	80059a2 <_putc_r+0x5a>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	6022      	str	r2, [r4, #0]
 8005988:	701d      	strb	r5, [r3, #0]
 800598a:	b2ed      	uxtb	r5, r5
 800598c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800598e:	07da      	lsls	r2, r3, #31
 8005990:	d405      	bmi.n	800599e <_putc_r+0x56>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	059b      	lsls	r3, r3, #22
 8005996:	d402      	bmi.n	800599e <_putc_r+0x56>
 8005998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800599a:	f7ff f959 	bl	8004c50 <__retarget_lock_release_recursive>
 800599e:	4628      	mov	r0, r5
 80059a0:	bd70      	pop	{r4, r5, r6, pc}
 80059a2:	4629      	mov	r1, r5
 80059a4:	4622      	mov	r2, r4
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7fe ffb1 	bl	800490e <__swbuf_r>
 80059ac:	4605      	mov	r5, r0
 80059ae:	e7ed      	b.n	800598c <_putc_r+0x44>

080059b0 <memmove>:
 80059b0:	4288      	cmp	r0, r1
 80059b2:	b510      	push	{r4, lr}
 80059b4:	eb01 0402 	add.w	r4, r1, r2
 80059b8:	d902      	bls.n	80059c0 <memmove+0x10>
 80059ba:	4284      	cmp	r4, r0
 80059bc:	4623      	mov	r3, r4
 80059be:	d807      	bhi.n	80059d0 <memmove+0x20>
 80059c0:	1e43      	subs	r3, r0, #1
 80059c2:	42a1      	cmp	r1, r4
 80059c4:	d008      	beq.n	80059d8 <memmove+0x28>
 80059c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ce:	e7f8      	b.n	80059c2 <memmove+0x12>
 80059d0:	4402      	add	r2, r0
 80059d2:	4601      	mov	r1, r0
 80059d4:	428a      	cmp	r2, r1
 80059d6:	d100      	bne.n	80059da <memmove+0x2a>
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059e2:	e7f7      	b.n	80059d4 <memmove+0x24>

080059e4 <_fstat_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4d07      	ldr	r5, [pc, #28]	@ (8005a04 <_fstat_r+0x20>)
 80059e8:	2300      	movs	r3, #0
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	f7fb fe01 	bl	80015f8 <_fstat>
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	d102      	bne.n	8005a00 <_fstat_r+0x1c>
 80059fa:	682b      	ldr	r3, [r5, #0]
 80059fc:	b103      	cbz	r3, 8005a00 <_fstat_r+0x1c>
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	bd38      	pop	{r3, r4, r5, pc}
 8005a02:	bf00      	nop
 8005a04:	20000b48 	.word	0x20000b48

08005a08 <_isatty_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4d06      	ldr	r5, [pc, #24]	@ (8005a24 <_isatty_r+0x1c>)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4608      	mov	r0, r1
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	f7fb fe00 	bl	8001618 <_isatty>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d102      	bne.n	8005a22 <_isatty_r+0x1a>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	b103      	cbz	r3, 8005a22 <_isatty_r+0x1a>
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	20000b48 	.word	0x20000b48

08005a28 <_sbrk_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4d06      	ldr	r5, [pc, #24]	@ (8005a44 <_sbrk_r+0x1c>)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4604      	mov	r4, r0
 8005a30:	4608      	mov	r0, r1
 8005a32:	602b      	str	r3, [r5, #0]
 8005a34:	f7fb fe08 	bl	8001648 <_sbrk>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_sbrk_r+0x1a>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_sbrk_r+0x1a>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20000b48 	.word	0x20000b48

08005a48 <abort>:
 8005a48:	b508      	push	{r3, lr}
 8005a4a:	2006      	movs	r0, #6
 8005a4c:	f000 f85a 	bl	8005b04 <raise>
 8005a50:	2001      	movs	r0, #1
 8005a52:	f7fb fd81 	bl	8001558 <_exit>

08005a56 <_realloc_r>:
 8005a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	460d      	mov	r5, r1
 8005a60:	b921      	cbnz	r1, 8005a6c <_realloc_r+0x16>
 8005a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a66:	4611      	mov	r1, r2
 8005a68:	f7ff b99c 	b.w	8004da4 <_malloc_r>
 8005a6c:	b92a      	cbnz	r2, 8005a7a <_realloc_r+0x24>
 8005a6e:	f7ff f925 	bl	8004cbc <_free_r>
 8005a72:	4625      	mov	r5, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7a:	f000 f85f 	bl	8005b3c <_malloc_usable_size_r>
 8005a7e:	4284      	cmp	r4, r0
 8005a80:	4606      	mov	r6, r0
 8005a82:	d802      	bhi.n	8005a8a <_realloc_r+0x34>
 8005a84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a88:	d8f4      	bhi.n	8005a74 <_realloc_r+0x1e>
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	f7ff f989 	bl	8004da4 <_malloc_r>
 8005a92:	4680      	mov	r8, r0
 8005a94:	b908      	cbnz	r0, 8005a9a <_realloc_r+0x44>
 8005a96:	4645      	mov	r5, r8
 8005a98:	e7ec      	b.n	8005a74 <_realloc_r+0x1e>
 8005a9a:	42b4      	cmp	r4, r6
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	bf28      	it	cs
 8005aa2:	4632      	movcs	r2, r6
 8005aa4:	f7ff f8dd 	bl	8004c62 <memcpy>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4638      	mov	r0, r7
 8005aac:	f7ff f906 	bl	8004cbc <_free_r>
 8005ab0:	e7f1      	b.n	8005a96 <_realloc_r+0x40>

08005ab2 <_raise_r>:
 8005ab2:	291f      	cmp	r1, #31
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	460c      	mov	r4, r1
 8005aba:	d904      	bls.n	8005ac6 <_raise_r+0x14>
 8005abc:	2316      	movs	r3, #22
 8005abe:	6003      	str	r3, [r0, #0]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005ac8:	b112      	cbz	r2, 8005ad0 <_raise_r+0x1e>
 8005aca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ace:	b94b      	cbnz	r3, 8005ae4 <_raise_r+0x32>
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f831 	bl	8005b38 <_getpid_r>
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4601      	mov	r1, r0
 8005ada:	4628      	mov	r0, r5
 8005adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae0:	f000 b818 	b.w	8005b14 <_kill_r>
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d00a      	beq.n	8005afe <_raise_r+0x4c>
 8005ae8:	1c59      	adds	r1, r3, #1
 8005aea:	d103      	bne.n	8005af4 <_raise_r+0x42>
 8005aec:	2316      	movs	r3, #22
 8005aee:	6003      	str	r3, [r0, #0]
 8005af0:	2001      	movs	r0, #1
 8005af2:	e7e7      	b.n	8005ac4 <_raise_r+0x12>
 8005af4:	2100      	movs	r1, #0
 8005af6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005afa:	4620      	mov	r0, r4
 8005afc:	4798      	blx	r3
 8005afe:	2000      	movs	r0, #0
 8005b00:	e7e0      	b.n	8005ac4 <_raise_r+0x12>
	...

08005b04 <raise>:
 8005b04:	4b02      	ldr	r3, [pc, #8]	@ (8005b10 <raise+0xc>)
 8005b06:	4601      	mov	r1, r0
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	f7ff bfd2 	b.w	8005ab2 <_raise_r>
 8005b0e:	bf00      	nop
 8005b10:	20000024 	.word	0x20000024

08005b14 <_kill_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4d07      	ldr	r5, [pc, #28]	@ (8005b34 <_kill_r+0x20>)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	f7fb fd09 	bl	8001538 <_kill>
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d102      	bne.n	8005b30 <_kill_r+0x1c>
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	b103      	cbz	r3, 8005b30 <_kill_r+0x1c>
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	bd38      	pop	{r3, r4, r5, pc}
 8005b32:	bf00      	nop
 8005b34:	20000b48 	.word	0x20000b48

08005b38 <_getpid_r>:
 8005b38:	f7fb bcf6 	b.w	8001528 <_getpid>

08005b3c <_malloc_usable_size_r>:
 8005b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b40:	1f18      	subs	r0, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bfbc      	itt	lt
 8005b46:	580b      	ldrlt	r3, [r1, r0]
 8005b48:	18c0      	addlt	r0, r0, r3
 8005b4a:	4770      	bx	lr

08005b4c <_init>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr

08005b58 <_fini>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr
